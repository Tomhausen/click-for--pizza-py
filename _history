{"entries":[{"timestamp":1711895570163,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\""],[0,"\n   "]],"start1":90,"start2":90,"length1":67,"length2":8}]}]},{"timestamp":1711896212868,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"@namespace\r\nclass SpriteKind:\r\n    buy = SpriteKind.create()\r\n    collider = SpriteKind.create()\r\n# bh2\r\n    upgrade_click = SpriteKind.create()\r\n# /bh2\r\n\r\n# variables\r\npizza_per_click = 1\r\npizza_per_second = 0\r\n# bh5\r\nbuttons_to_reset: List[Sprite] = []\r\n# /bh5\r\nstore_items: List[str] = [\r\n    \"NEW TOPPINGS\",\r\n    \"MORE OVENS\",\r\n    \"MORE WAITERS\",\r\n    \"MORE CHEFS\",\r\n# bh4\r\n    \"MORE RESTAURANTS\"\r\n# /bh4\r\n]\r\nstarting_cost = [\r\n    10,\r\n    100,\r\n    1000,\r\n    10000,\r\n# bh4\r\n    100000\r\n# /bh4\r\n]\r\npassive_increase_values = [1, 2, 5, 10, 20] # bh4\r\n\r\n# sprites\r\npizza_button = sprites.create(assets.image(\"pizza\"), SpriteKind.player)\r\npizza_button.x = 143\r\npizza_per_second_sprite = textsprite.create(str(pizza_per_second), 3, 1)\r\npizza_per_second_sprite.set_border(2, 3)\r\npizza_per_second_sprite.y = 20\r\npizza_per_second_sprite.right = 162\r\n# bh2\r\nclick_upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade_click)\r\nclick_upgrade_button.scale = 2\r\nclick_upgrade_button.set_position(143, 90)\r\nsprites.set_data_number(click_upgrade_button, \"cost\", 100)\r\n# /bh2\r\n\r\n# setup\r\ninfo.set_score(0)\r\nscene.set_background_color(1)\r\n\r\n# bh2\r\ndef make_click_upgrade_cost_display():\r\n    if sprites.read_data_sprite(click_upgrade_button, \"cost_display\"):\r\n        sprites.read_data_sprite(click_upgrade_button, \"cost_display\").destroy()\r\n    cost = sprites.read_data_number(click_upgrade_button, \"cost\")\r\n    click_upgrade_cost_display = textsprite.create(str(cost), 5, 2)\r\n    click_upgrade_cost_display.set_position(143, 110)\r\nmake_click_upgrade_cost_display()\r\n# /bh2\r\n\r\ndef make_quantity_display(button: Sprite):\r\n    quantity = sprites.read_data_number(button, \"quantity\")\r\n    quantity_text = textsprite.create(str(quantity), 5, 2)\r\n    quantity_text.y = button.y + 10\r\n    quantity_text.left = 5\r\n    return quantity_text\r\n\r\ndef make_cost_display(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    cost_text = textsprite.create(str(cost), 5, 2)\r\n    cost_text.y = button.y + 10\r\n    cost_text.right = 80\r\n    return cost_text\r\n\r\ndef setup_buttons():\r\n    y = 10\r\n    for i in range(len(store_items)):\r\n        buy_button = textsprite.create(store_items[i], 5, 2)\r\n        buy_button.set_kind(SpriteKind.buy)\r\n        buy_button.set_flag(SpriteFlag.GHOST, False)\r\n        buy_button.y = y\r\n        buy_button.left = 5\r\n        sprites.set_data_number(buy_button, \"quantity\", 0)\r\n        sprites.set_data_number(buy_button, \"cost\", starting_cost[i])\r\n        sprites.set_data_number(buy_button, \"passive_increase_values\", passive_increase_values[i])\r\n        sprites.set_data_sprite(buy_button, \"quantity_text\", make_quantity_display(buy_button))\r\n        sprites.set_data_sprite(buy_button, \"cost_text\", make_cost_display(buy_button))\r\n        y += 20\r\nsetup_buttons()\r\n\r\ndef reigster_input(x, y):\r\n    collider = sprites.create(image.create(2, 2), SpriteKind.collider)\r\n    collider.set_position(x, y)\r\n    collider.image.fill(1)\r\n    collider.lifespan = 500\r\n    collider.set_flag(SpriteFlag.INVISIBLE, True)\r\nbrowserEvents.mouse_left.on_event(browserEvents.MouseButtonEvent.PRESSED, reigster_input)\r\n\r\n# bh3\r\ndef animate_click(collider: Sprite):\r\n    pizza = sprites.create(assets.image(\"pizza\"))\r\n    pizza.scale = 0.25\r\n    pizza.set_position(collider.x + 5, collider.y)\r\n    pizza.set_velocity(randint(-15, 15), -15)\r\n    pizza.ay = 50\r\n    pizza.lifespan = 1000\r\n    increase = textsprite.create(str(pizza_per_click), 0, 15)\r\n    increase.set_position(collider.x + randint(-8, 8), collider.y)\r\n    increase.vy = -5\r\n    increase.lifespan = 2000\r\n# /bh3\r\n\r\n# bh5\r\ndef reset_button():\r\n    buttons_to_reset.shift().scale = 1\r\n\r\ndef change_size(button: Sprite):\r\n    button.scale = 0.9\r\n    buttons_to_reset.append(button)\r\n    timer.after(100, reset_button)\r\n\r\ndef click_pizza(collider, pizza):\r\n# bh3\r\n    animate_click(collider)\r\n# /bh3\r\n    change_size(pizza)\r\n    info.change_score_by(pizza_per_click)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.player, click_pizza)\r\n\r\ndef buy_more(collider, button):\r\n    global pizza_per_second\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        music.ba_ding.play()\r\n        info.change_score_by(-cost)\r\n        sprites.change_data_number_by(button, \"quantity\", 1)\r\n        sprites.read_data_sprite(button, \"quantity_text\").destroy()\r\n        sprites.set_data_sprite(button, \"quantity_text\", make_quantity_display(button))\r\n        sprites.change_data_number_by(button, \"cost\", (cost // 10) + 1)\r\n        sprites.read_data_sprite(button, \"cost_text\").destroy()\r\n        sprites.set_data_sprite(button, \"cost_text\", make_cost_display(button))\r\n        pizza_per_second += sprites.read_data_number(button, \"passive_increase_values\")\r\n        pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n        pizza_per_second_sprite.right = 162\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.buy, buy_more)\r\n\r\n# bh2\r\ndef upgrade_click(collider, button):\r\n    global pizza_per_click\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        pizza_per_click *= 2\r\n        sprites.set_data_number(button, \"cost\", cost * 10)\r\n        make_click_upgrade_cost_display()\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade_click, upgrade_click)\r\n# /bh2\r\n\r\ndef passive_loop():\r\n    info.change_score_by(pizza_per_second)\r\ngame.on_update_interval(1000, passive_loop)\r\n\r\n# bh1\r\ndef falling_pizza():\r\n    pizzas_to_spawn = Math.ceil(pizza_per_second / 1000)\r\n    pizzas_to_spawn = Math.constrain(pizzas_to_spawn, 0, 50)\r\n    for i in range(pizzas_to_spawn):\r\n        pizza = sprites.create(assets.image(\"pizza\"), SpriteKind.projectile)\r\n        pizza.scale = 0.25\r\n        pizza.bottom = 1\r\n        pizza.x = randint(6, 154)\r\n        pizza.z = -100\r\n        pizza.vy = 5\r\n        pizza.set_flag(SpriteFlag.AUTO_DESTROY, True)\r\ngame.on_update_interval(2000, falling_pizza)\r\n# /bh1\r\n\r\n\r\n# bh3 animate click\r\n# bh1 pizza falling\r\n# bh2 upgrade per click - could be the guided\r\n# db? if not show how much a click is worth\r\n\r\n# bh4 more things you can buy\r\n# bh5 button affordance\r\n# upgrade a type of thing you've bought\r\n# achievements\r\n\r\n# random star that flies in\r\n\r\n"],[1,"music.ba_ding.play()"]],"start1":0,"start2":0,"length1":6390,"length2":20}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"namespace SpriteKind {\n    export const buy = SpriteKind.create()\n    export const collider = SpriteKind.create()\n    //  bh2\n    export const upgrade_click = SpriteKind.create()\n}\n\n//  /bh2\n//  variables\nlet pizza_per_click = 1\nlet pizza_per_second = 0\n//  bh5\nlet buttons_to_reset : Sprite[] = []\n//  /bh5\nlet store_items = [\"NEW TOPPINGS\", \"MORE OVENS\", \"MORE WAITERS\", \"MORE CHEFS\", \"MORE RESTAURANTS\"]\n//  bh4\n//  /bh4\nlet starting_cost = [10, 100, 1000, 10000, 100000]\n//  bh4\n//  /bh4\nlet passive_increase_values = [1, 2, 5, 10, 20]\n//  bh4\n//  sprites\nlet pizza_button = sprites.create(assets.image`pizza`, SpriteKind.Player)\npizza_button.x = 143\nlet pizza_per_second_sprite = textsprite.create(\"\" + pizza_per_second, 3, 1)\npizza_per_second_sprite.setBorder(2, 3)\npizza_per_second_sprite.y = 20\npizza_per_second_sprite.right = 162\n//  bh2\nlet click_upgrade_button = sprites.create(assets.image`upgrade`, SpriteKind.upgrade_click)\nclick_upgrade_button.scale = 2\nclick_upgrade_button.setPosition(143, 90)\nsprites.setDataNumber(click_upgrade_button, \"cost\", 100)\n//  /bh2\n//  setup\ninfo.setScore(0)\nscene.setBackgroundColor(1)\n//  bh2\nfunction make_click_upgrade_cost_display() {\n    if (sprites.readDataSprite(click_upgrade_button, \"cost_display\")) {\n        sprites.readDataSprite(click_upgrade_button, \"cost_display\").destroy()\n    }\n    \n    let cost = sprites.readDataNumber(click_upgrade_button, \"cost\")\n    let click_upgrade_cost_display = textsprite.create(\"\" + cost, 5, 2)\n    click_upgrade_cost_display.setPosition(143, 110)\n}\n\nmake_click_upgrade_cost_display()\n//  /bh2\nfunction make_quantity_display(button: Sprite): TextSprite {\n    let quantity = sprites.readDataNumber(button, \"quantity\")\n    let quantity_text = textsprite.create(\"\" + quantity, 5, 2)\n    quantity_text.y = button.y + 10\n    quantity_text.left = 5\n    return quantity_text\n}\n\nfunction make_cost_display(button: Sprite): TextSprite {\n    let cost = sprites.readDataNumber(button, \"cost\")\n    let cost_text = textsprite.create(\"\" + cost, 5, 2)\n    cost_text.y = button.y + 10\n    cost_text.right = 80\n    return cost_text\n}\n\nfunction setup_buttons() {\n    let buy_button: TextSprite;\n    let y = 10\n    for (let i = 0; i < store_items.length; i++) {\n        buy_button = textsprite.create(store_items[i], 5, 2)\n        buy_button.setKind(SpriteKind.buy)\n        buy_button.setFlag(SpriteFlag.Ghost, false)\n        buy_button.y = y\n        buy_button.left = 5\n        sprites.setDataNumber(buy_button, \"quantity\", 0)\n        sprites.setDataNumber(buy_button, \"cost\", starting_cost[i])\n        sprites.setDataNumber(buy_button, \"passive_increase_values\", passive_increase_values[i])\n        sprites.setDataSprite(buy_button, \"quantity_text\", make_quantity_display(buy_button))\n        sprites.setDataSprite(buy_button, \"cost_text\", make_cost_display(buy_button))\n        y += 20\n    }\n}\n\nsetup_buttons()\nbrowserEvents.MouseLeft.onEvent(browserEvents.MouseButtonEvent.Pressed, function reigster_input(x: number, y: number) {\n    let collider = sprites.create(image.create(2, 2), SpriteKind.collider)\n    collider.setPosition(x, y)\n    collider.image.fill(1)\n    collider.lifespan = 500\n    collider.setFlag(SpriteFlag.Invisible, true)\n})\n//  bh3\nfunction animate_click(collider: Sprite) {\n    let pizza = sprites.create(assets.image`pizza`)\n    pizza.scale = 0.25\n    pizza.setPosition(collider.x + 5, collider.y)\n    pizza.setVelocity(randint(-15, 15), -15)\n    pizza.ay = 50\n    pizza.lifespan = 1000\n    let increase = textsprite.create(\"\" + pizza_per_click, 0, 15)\n    increase.setPosition(collider.x + randint(-8, 8), collider.y)\n    increase.vy = -5\n    increase.lifespan = 2000\n}\n\n//  /bh3\n//  bh5\nfunction change_size(button: Sprite) {\n    button.scale = 0.9\n    music.thump.play()\n    buttons_to_reset.push(button)\n    timer.after(100, function reset_button() {\n        buttons_to_reset.shift().scale = 1\n    })\n}\n\nsprites.onOverlap(SpriteKind.collider, SpriteKind.Player, function click_pizza(collider: Sprite, pizza: Sprite) {\n    //  bh3\n    animate_click(collider)\n    //  /bh3\n    change_size(pizza)\n    info.changeScoreBy(pizza_per_click)\n    collider.destroy()\n})\nsprites.onOverlap(SpriteKind.collider, SpriteKind.buy, function buy_more(collider: Sprite, button: Sprite) {\n    \n    let cost = sprites.readDataNumber(button, \"cost\")\n    if (cost > info.score()) {\n        music.buzzer.play()\n    } else {\n        music.baDing.play()\n        info.changeScoreBy(-cost)\n        sprites.changeDataNumberBy(button, \"quantity\", 1)\n        sprites.readDataSprite(button, \"quantity_text\").destroy()\n        sprites.setDataSprite(button, \"quantity_text\", make_quantity_display(button))\n        sprites.changeDataNumberBy(button, \"cost\", Math.idiv(cost, 10) + 1)\n        sprites.readDataSprite(button, \"cost_text\").destroy()\n        sprites.setDataSprite(button, \"cost_text\", make_cost_display(button))\n        pizza_per_second += sprites.readDataNumber(button, \"passive_increase_values\")\n        pizza_per_second_sprite.setText(\"\" + pizza_per_second)\n        pizza_per_second_sprite.right = 162\n    }\n    \n    collider.destroy()\n})\n//  bh2\nsprites.onOverlap(SpriteKind.collider, SpriteKind.upgrade_click, function upgrade_click(collider: Sprite, button: Sprite) {\n    \n    let cost = sprites.readDataNumber(button, \"cost\")\n    if (cost > info.score()) {\n        music.buzzer.play()\n    } else {\n        pizza_per_click *= 2\n        sprites.setDataNumber(button, \"cost\", cost * 10)\n        make_click_upgrade_cost_display()\n    }\n    \n    collider.destroy()\n})\n//  /bh2\ngame.onUpdateInterval(1000, function passive_loop() {\n    info.changeScoreBy(pizza_per_second)\n})\n//  bh1\ngame.onUpdateInterval(2000, function falling_pizza() {\n    let pizza: Sprite;\n    let pizzas_to_spawn = Math.ceil(pizza_per_second / 1000)\n    pizzas_to_spawn = Math.constrain(pizzas_to_spawn, 0, 50)\n    for (let i = 0; i < pizzas_to_spawn; i++) {\n        pizza = sprites.create(assets.image`pizza`, SpriteKind.Projectile)\n        pizza.scale = 0.25\n        pizza.bottom = 1\n        pizza.x = randint(6, 154)\n        pizza.z = -100\n        pizza.vy = 5\n        pizza.setFlag(SpriteFlag.AutoDestroy, true)\n    }\n}"],[1,"music.baDing.play("],[0,")\n"]],"start1":0,"start2":0,"length1":6177,"length2":20}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"1.0\""],[-1,",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"arcade-sprite-data\": \"github:microsoft/arcade-sprite-data#v0.2.1\",\n        \"browser-events\": \"*\""],[0,"\n   "]],"start1":149,"start2":149,"length1":177,"length2":8},{"diffs":[[0,".ts\""],[-1,",\n        \"images.g.jres\",\n        \"images.g.ts\""],[0,"\n   "]],"start1":325,"start2":325,"length1":56,"length2":8}]},{"type":"added","filename":"images.g.jres","value":"{\n    \"image1\": {\n        \"data\": \"hwQgACAAAAAAAAAAAAAAAAAAAAAAu0REAAAAAAAAAAAAAAAAu10VQQAAAAAAAAAAAAAAS11V0eUAAAAAAAAAAAAARtRdXUHlAAAAAAAAAAAAa4dV1R1dBAAAAAAAAAAAu22HJS4dVA4AAAAAAAAAu11VViLiUlQOAAAAAAAAS+Qu1SUiIt7UTQAAAAAAuz0i4tIlIyLeTe4AAAAAQF0lIiJeJTMi3uUAAAAAsFRVJSMiXlUi4tPlAAAAAEtd1SUzIl5V5T5dBADg7k5dVdVVIuJTVVVVVAQA60vrVFXVVu0+VdVVFdQOAL5DtN5VbYfdVVXVXRVUDgC+NENLVWWHXVVV1V1BRQAAuzQzRN1VVlVVVdVWQUUAALtLM0PUVVVV7lJlh9XlAABLu0QzRF1VJSIuZYcR7QQAu7REM7RUVSIi4lUW0d1NALBLSzNDu1UyIuJV0VTkTgAAu0QzQ7vUMiPiVUFdDgAAALBLRENETi0iPlVN5QAAAAAAvkQ0tOvU7lMV1OQAAAAAAOBLRETrvt1VUdTtAAAAAAAAu0REtE7d1UXU5AAAAAAAALBLRETr1NVFTQ4AAAAAAAAAu0REu0tE1O0OAAAAAAAAAOBOtLvr1E3uAAAAAAAAAAAA7kS0u+7k7gAAAAAAAAAAAODuu+vu7g4AAAAAAAAAAAAA6+7u7u4AAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"pizza\"\n    },\n    \"image2\": {\n        \"data\": \"hwQLAAsAAABVVVVVVQUAAFVVVVVVBQAAVVVSVVUFAABVJVJVVQUAAFUiIiIiBQAAJSIiIiIFAABVIiIiIgUAAFUlUlVVBQAAVVVSVVUFAABVVVVVVQUAAFVVVVVVBQAA\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"upgrade\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}"},{"type":"added","filename":"images.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myImages {\n\n    helpers._registerFactory(\"image\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"image1\":\n            case \"pizza\":return img`\n.............beebbbb............\n............eebbbb4bb...........\n............eb344bb4bb..........\n............e44334bb4bb.........\n............eb433344b4be........\n............4eb43344444be.......\n...........bd4eb43333344bb......\n..........b455d4443333444bb.....\n..........4d5555d444333444bb....\n.........4555555dd4b4443444be...\n........bd5555d555d4bb444444ee..\n........b55ddd665555bb4b44444ee.\n.......bd5555677655554ebb44444eb\n.......43222558855555d4eeb44b4ee\n......b422332ddd555222d4eebbb4be\n......be22232ed55522332db4ebbbbe\n.....bde22222e555e22232edd4bbbbe\n.....b52e222e3555e22222eddd4ebee\n....bd552eee355552e222e355544eee\n....665dd5555555552eee355dd4deee\n...6776555555555555555551554d4ee\n...4885222555dddd6655551544d4eee\n..b45522332555dd677611d444ddeee.\n..4d5222232e55555881d44ddd4eee..\n.bdd5e22222e555115114d54d4ee....\n.b55d2e222e351144d1d55eeee......\nbd5ddd2eee3d444555dd4e..........\nb555115dddd55d544eede...........\n4511d444d5544ee...4de...........\n41d4555d4ee........44...........\n41554eede.......................\n44ee...4e.......................\n`;\n            case \"image2\":\n            case \"upgrade\":return img`\n5 5 5 5 5 5 5 5 5 5 5 \n5 5 5 5 5 2 5 5 5 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 2 2 2 2 2 5 5 5 \n5 5 2 2 2 2 2 2 2 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 5 5 5 5 5 5 5 5 \n`;\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"animation\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"song\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"}]},{"timestamp":1711896818327,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," 0\r\n"],[-1,"mouse_x = 0\r\nmouse_y = 0\r\n"],[0,"# bh"]],"start1":208,"start2":208,"length1":34,"length2":8},{"diffs":[[0,"\r\n\r\n"],[-1,"def mouse_over_button():\r\n    temp_collider = sprites.create(image.create(1, 1))\r\n    temp_collider.image.fill(1)\r\n    temp_collider.set_position(mouse_x, mouse_y)\r\n    if temp_collider.overlaps_with(pizza_button):\r\n        pizza_button.scale = 1.1\r\n    temp_collider.destroy()\r\ngame.on_update(mouse_over_button)\r\n# /bh5\r\n\r\n"],[0,"def "]],"start1":3808,"start2":3808,"length1":332,"length2":8},{"diffs":[[0,"# /bh3\r\n"],[-1,"# bh5\r\n"],[0,"    chan"]],"start1":3883,"start2":3883,"length1":23,"length2":16},{"diffs":[[0,"pizza)\r\n"],[-1,"# /bh5\r\n"],[0,"    info"]],"start1":3907,"start2":3907,"length1":24,"length2":16},{"diffs":[[0,"\r\n\r\n"],[-1,"def mouse_move(x, y):\r\n    global mouse_x, mouse_y\r\n    mouse_x = x\r\n    mouse_y = y\r\nbrowserEvents.on_mouse_move(mouse_move)\r\n\r\n"],[0,"def "]],"start1":5479,"start2":5479,"length1":137,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"= 0\n"],[-1,"let mouse_x = 0\nlet mouse_y = 0\n"],[0,"//  "]],"start1":250,"start2":250,"length1":40,"length2":8},{"diffs":[[0,"e = 0.9\n"],[1,"    music.thump.play()\n"],[0,"    butt"]],"start1":3741,"start2":3741,"length1":16,"length2":39},{"diffs":[[0,"button)\n"],[-1,""],[0,"    time"]],"start1":3798,"start2":3798,"length1":16,"length2":16},{"diffs":[[0,"\n}\n\n"],[-1,"game.onUpdate(function mouse_over_button() {\n    let temp_collider = sprites.create(image.create(1, 1))\n    temp_collider.image.fill(1)\n    temp_collider.setPosition(mouse_x, mouse_y)\n    if (temp_collider.overlapsWith(pizza_button)) {\n        pizza_button.scale = 1.1\n    }\n    \n    temp_collider.destroy()\n})\n//  /bh5\n"],[0,"spri"]],"start1":3902,"start2":3902,"length1":328,"length2":8},{"diffs":[[0,"bh3\n"],[-1,"    //  bh5\n"],[0,"    "]],"start1":4069,"start2":4069,"length1":20,"length2":8},{"diffs":[[0,"za)\n"],[-1,"    //  /bh5\n"],[0,"    "]],"start1":4092,"start2":4092,"length1":21,"length2":8},{"diffs":[[0,"bh2\n"],[-1,"browserEvents.onMouseMove(function mouse_move(x: number, y: number) {\n    \n    mouse_x = x\n    mouse_y = y\n})\n"],[0,"game"]],"start1":5553,"start2":5553,"length1":118,"length2":8}]}]},{"timestamp":1711897420162,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"\n# bh5\r\n"],[1,"def reset_button():\r\n    buttons_to_reset.shift().scale = 1\r\n\r\ndef change_size(button: Sprite):\r\n    button.scale = 0.9\r\n    buttons_to_reset.append(button)\r\n    timer.after(100, reset_button)\r\n\r\n"],[0,"def mous"]],"start1":3634,"start2":3634,"length1":16,"length2":212},{"diffs":[[0,"    "],[-1,"    if browserEvents.mouse_left.is_pressed():\r\n            pizza_button.scale = 0.9\r\n            pause(100)\r\n            pizza_button.scale = 1\r\n    else:\r\n        pizza_button.scale = 1\r\n    temp_collider.destroy()\r\n\r\ndef setup_mouse_over_loop():\r\n    game.on_update(mouse_over_button)\r\ntimer.background(setup_mouse_over_loop"],[1,"temp_collider.destroy()\r\ngame.on_update(mouse_over_button"],[0,")\r\n#"]],"start1":4088,"start2":4088,"length1":334,"length2":65},{"diffs":[[0,"r)\r\n# /bh3\r\n"],[1,"# bh5\r\n    change_size(pizza)\r\n# /bh5\r\n"],[0,"    info.cha"]],"start1":4229,"start2":4229,"length1":24,"length2":63}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"bh5\n"],[-1,"timer.background("],[1,"function change_size(button: Sprite) {\n    button.scale = 0.9\n    buttons_to_reset.push(button)\n    timer.after(100, "],[0,"func"]],"start1":3715,"start2":3715,"length1":25,"length2":125},{"diffs":[[0,"ion "],[1,"re"],[0,"set"],[-1,"up_mouse_over_loop() {\n    "],[1,"_button() {\n        buttons_to_reset.shift().scale = 1\n    })\n}\n\n"],[0,"game"]],"start1":3841,"start2":3841,"length1":38,"length2":78},{"diffs":[[0,") {\n    "],[-1,"  "],[-1,"  "],[0,"let temp"]],"start1":3956,"start2":3956,"length1":20,"length2":16},{"diffs":[[0,"(1, 1))\n"],[-1,"    "],[0,"    temp"]],"start1":4011,"start2":4011,"length1":20,"length2":16},{"diffs":[[0,"fill(1)\n    "],[-1," "],[-1,"   "],[0,"temp_collide"]],"start1":4043,"start2":4043,"length1":28,"length2":24},{"diffs":[[0,"ouse_y)\n"],[-1,"    "],[0,"    if ("]],"start1":4091,"start2":4091,"length1":20,"length2":16},{"diffs":[[0,"ton)) {\n        "],[-1,"    "],[0,"pizza_button.sca"]],"start1":4143,"start2":4143,"length1":36,"length2":32},{"diffs":[[0,"    "],[-1,"        if (browserEvents.MouseLeft.isPressed()) {\n                pizza_button.scale = 0.9\n                pause(100)\n                pizza_button.scale = 1\n            }\n            \n        } else {\n            pizza_button.scale = 1\n        }\n        \n    "],[1,"}\n    \n"],[0,"    "]],"start1":4184,"start2":4184,"length1":268,"length2":15},{"diffs":[[0,"stroy()\n"],[-1,"    })\n"],[0,"})\n//  /"]],"start1":4215,"start2":4215,"length1":23,"length2":16},{"diffs":[[0,"   //  /bh3\n"],[1,"    //  bh5\n    change_size(pizza)\n    //  /bh5\n"],[0,"    info.cha"]],"start1":4390,"start2":4390,"length1":24,"length2":72}]}]},{"timestamp":1711898034908,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"     if "],[-1,"not "],[0,"browserE"]],"start1":3895,"start2":3895,"length1":20,"length2":16},{"diffs":[[0," = 0.9\r\n"],[1,"            pause(100)\r\n            pizza_button.scale = 1\r\n"],[0,"    else"]],"start1":3973,"start2":3973,"length1":16,"length2":76},{"diffs":[[0,"ance"],[-1," - the clicking is funky"],[0,"\r\n# "]],"start1":6822,"start2":6822,"length1":32,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"if ("],[-1,"!"],[0,"brow"]],"start1":4076,"start2":4076,"length1":9,"length2":8},{"diffs":[[0,"e = 0.9\n"],[1,"                pause(100)\n                pizza_button.scale = 1\n"],[0,"        "]],"start1":4152,"start2":4152,"length1":16,"length2":82}]}]},{"timestamp":1711898161358,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"l\"><"],[-1,"variables></variables><"],[0,"bloc"]],"start1":52,"start2":52,"length1":31,"length2":8},{"diffs":[[0,"art\""],[-1," id=\"rA4IsQBsUbr04~BdpgAt\""],[0," x=\""]],"start1":77,"start2":77,"length1":34,"length2":8},{"diffs":[[0,"und\""],[-1," id=\"P;Aqg~=1@6VS8A/cT6%8\""],[0,"><fi"]],"start1":146,"start2":146,"length1":34,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"mouse_y = 0\n"],[1,"//  bh5\nlet buttons_to_reset : Sprite[] = []\n//  /bh5\n"],[0,"let store_it"]],"start1":274,"start2":274,"length1":24,"length2":78}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":550,"start2":550,"length1":52,"length2":8},{"diffs":[[0,"\": \""],[-1,"2.0.1"],[1,"1.12.2"],[0,"\",\n "]],"start1":593,"start2":593,"length1":13,"length2":14},{"diffs":[[0,"5.2\""],[-1,",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ]"],[1,"\n    }"],[0,",\n  "]],"start1":624,"start2":624,"length1":94,"length2":14}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"_y = 0\r\n"],[1,"# bh5\r\nbuttons_to_reset: List[Sprite] = []\r\n# /bh5\r\n"],[0,"store_it"]],"start1":230,"start2":230,"length1":16,"length2":68}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]},{"timestamp":1711899680542,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"()\r\n"],[-1,"    \r\n"],[0,"# /b"]],"start1":142,"start2":142,"length1":14,"length2":8}]}]},{"timestamp":1711900329135,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e()\n"],[-1,"    //  /bh2\n    //  bh6\n    export const upgrade = SpriteKind.create()\n"],[0,"}\n\n/"]],"start1":175,"start2":175,"length1":80,"length2":8},{"diffs":[[0,")\n}\n\n//  /bh"],[-1,"6"],[1,"2"],[0,"\n//  variabl"]],"start1":177,"start2":177,"length1":25,"length2":25},{"diffs":[[0," 100, 1000, "],[-1,"5"],[1,"10"],[0,"000, 10000]\n"]],"start1":426,"start2":426,"length1":25,"length2":26},{"diffs":[[0,"10000, 10000"],[1,"0"],[0,"]\n//  bh4\n//"]],"start1":438,"start2":438,"length1":24,"length2":25},{"diffs":[[0,"bh4\n"],[-1,"//  bh6\nlet upgrade_costs = [100, 500, 5000, 10000, 20000]\n//  bh4\n//  /bh4\n//  /bh6\n"],[0,"//  "]],"start1":522,"start2":522,"length1":93,"length2":8},{"diffs":[[0,"\n}\n\n"],[-1,"//  bh6\nfunction setup_upgrade_button(button: Sprite): Sprite {\n    let upgrade_button = sprites.create(assets.image`upgrade`, SpriteKind.upgrade)\n    upgrade_button.setPosition(100, button.y)\n    return upgrade_button\n}\n\nfunction setup_upgrade_price(button: Sprite) {\n    let cost = sprites.readDataNumber(button, \"upgrade_cost\")\n    let upgrade_price = textsprite.create(\"\" + cost, 5, 2)\n    upgrade_price.setPosition(100, button.y + 10)\n}\n\n//  /bh6\n"],[0,"func"]],"start1":2084,"start2":2084,"length1":460,"length2":8}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"()\r\n"],[-1,"# /bh2\r\n# bh6\r\n    upgrade = SpriteKind.create()"],[1,"    "],[0,"\r\n# /bh"],[-1,"6"],[1,"2"],[0,"\r\n\r\n"]],"start1":142,"start2":142,"length1":64,"length2":20},{"diffs":[[0," 1000,\r\n    "],[-1,"5"],[1,"10"],[0,"000,\r\n# bh4\r"]],"start1":435,"start2":435,"length1":25,"length2":26},{"diffs":[[0,"4\r\n    10000"],[1,"0"],[0,"\r\n# /bh4\r\n]\r"]],"start1":459,"start2":459,"length1":24,"length2":25},{"diffs":[[0,"bh4\r"],[-1,"\n# bh6\r\nupgrade_costs = [\r\n    100,\r\n    500,\r\n    5000,\r\n    10000,\r\n# bh4\r\n    20000\r\n# /bh4\r\n]\r\n# /bh6\r"],[0,"\n\r\n#"]],"start1":531,"start2":531,"length1":114,"length2":8},{"diffs":[[0,"\r\n\r\n"],[-1,"# bh6\r\ndef setup_upgrade_button(button: Sprite):\r\n    upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade)\r\n    upgrade_button.set_position(100, button.y)\r\n    return upgrade_button\r\n\r\ndef setup_upgrade_price(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"upgrade_cost\")\r\n    upgrade_price = textsprite.create(str(cost), 5, 2)\r\n    upgrade_price.set_position(100, button.y + 10)\r\n# /bh6\r\n\r\n"],[0,"def "]],"start1":2052,"start2":2052,"length1":438,"length2":8}]}]},{"timestamp":1711900934957,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"upgrade_"],[-1,"price"],[1,"button"],[0,"(button:"]],"start1":2266,"start2":2266,"length1":21,"length2":22},{"diffs":[[0,"utton: Sprite): "],[-1,"Text"],[0,"Sprite {\n    let"]],"start1":2282,"start2":2282,"length1":36,"length2":32},{"diffs":[[0,"prite {\n    let "],[-1,"cost"],[1,"upgrade_button"],[0," = sprites.readD"]],"start1":2299,"start2":2299,"length1":36,"length2":46},{"diffs":[[0,"tes."],[1,"c"],[0,"rea"],[-1,"dDataNumber(button, \"upgrade_cost\")\n    let upgrade_price = textsprite.create(\"\" + cost, 5, 2"],[1,"te(assets.image`upgrade`, SpriteKind.upgrade"],[0,")\n  "]],"start1":2336,"start2":2336,"length1":104,"length2":56},{"diffs":[[0,"upgrade_"],[-1,"price"],[1,"button"],[0,".setPosi"]],"start1":2394,"start2":2394,"length1":21,"length2":22},{"diffs":[[0,"button.y"],[-1," + 10"],[0,")\n    re"]],"start1":2426,"start2":2426,"length1":21,"length2":16},{"diffs":[[0,"upgrade_"],[-1,"price"],[1,"button"],[0,"\n}\n\nfunc"]],"start1":2447,"start2":2447,"length1":21,"length2":22},{"diffs":[[0,"n setup_upgrade_"],[-1,"button"],[1,"price"],[0,"(button: Sprite,"]],"start1":2472,"start2":2472,"length1":38,"length2":37},{"diffs":[[0,"rite"],[-1,", upgrade_cost: number): Sprite {\n    let upgrade_button"],[1,") {\n    let cost"],[0," = s"]],"start1":2504,"start2":2504,"length1":64,"length2":24},{"diffs":[[0,"tes."],[-1,"c"],[0,"rea"],[-1,"te(assets.image`upgrade`, SpriteKind.upgrade)\n    upgrade_button.setPosition(100, button.y)\n    sprites.set"],[1,"d"],[0,"Data"]],"start1":2531,"start2":2531,"length1":119,"length2":12},{"diffs":[[0,"aNumber("],[-1,"upgrade_"],[0,"button, "]],"start1":2542,"start2":2542,"length1":24,"length2":16},{"diffs":[[0,"ost\""],[-1,", upgrade_cost)\n    sprites.setDataSprite(upgrade_button, \"upgrade_button\", button)\n    //  when we buy we need this to change the \n    return upgrade_button"],[1,")\n    let upgrade_price = textsprite.create(\"\" + cost, 5, 2)\n    upgrade_price.setPosition(100, button.y + 10)"],[0,"\n}\n\n"]],"start1":2568,"start2":2568,"length1":165,"length2":118},{"diffs":[[0,"te;\n"],[-1,"    let upgrade_button: Sprite;\n"],[0,"    "]],"start1":2750,"start2":2750,"length1":40,"length2":8},{"diffs":[[0,"i])\n"],[-1,"        //  bh6\n        upgrade_button = setup_upgrade_button(buy_button, upgrade_costs[i])\n        sprites.setDataSprite(buy_button, \"upgrade_cost_display\", setup_upgrade_price(buy_button))\n"],[0,"    "]],"start1":3247,"start2":3247,"length1":199,"length2":8}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"upgrade_"],[-1,"price"],[1,"button"],[0,"(button:"]],"start1":2221,"start2":2221,"length1":21,"length2":22},{"diffs":[[0,": Sprite):\r\n    "],[-1,"cost"],[1,"upgrade_button"],[0," = sprites.read_"]],"start1":2242,"start2":2242,"length1":36,"length2":46},{"diffs":[[0,"tes."],[1,"c"],[0,"rea"],[-1,"d_data_number(button, \"upgrade_cost\")\r\n    upgrade_price = textsprite.create(str(cost), 5, 2"],[1,"te(assets.image(\"upgrade\"), SpriteKind.upgrade"],[0,")\r\n "]],"start1":2279,"start2":2279,"length1":103,"length2":58},{"diffs":[[0,"upgrade_"],[-1,"price"],[1,"button"],[0,".set_pos"]],"start1":2340,"start2":2340,"length1":21,"length2":22},{"diffs":[[0,"button.y"],[-1," + 10"],[0,")\r\n    r"]],"start1":2373,"start2":2373,"length1":21,"length2":16},{"diffs":[[0,"upgrade_"],[-1,"price"],[1,"button"],[0,"\r\n\r\ndef "]],"start1":2395,"start2":2395,"length1":21,"length2":22},{"diffs":[[0,"f setup_upgrade_"],[-1,"button"],[1,"price"],[0,"(button: Sprite,"]],"start1":2415,"start2":2415,"length1":38,"length2":37},{"diffs":[[0,"rite"],[-1,", upgrade_cost):\r\n    upgrade_button"],[1,"):\r\n    cost"],[0," = s"]],"start1":2447,"start2":2447,"length1":44,"length2":20},{"diffs":[[0,"tes."],[-1,"c"],[0,"rea"],[-1,"te(assets.image(\"upgrade\"), SpriteKind."],[1,"d_data_number(button, \""],[0,"upgrade"],[1,"_cost\""],[0,")\r\n "]],"start1":2470,"start2":2470,"length1":58,"length2":47},{"diffs":[[0,"ade_"],[-1,"button.set_position(100, button.y)\r\n    sprites.set_data_number(upgrade_button, \"upgrade_cost\", upgrade_cost)\r\n    sprites.set_data_sprite(upgrade_button, \"upgrade_button\", button) # when we buy we need this to change the effectiveness\r\n    return upgrade_button"],[1,"price = textsprite.create(str(cost), 5, 2)\r\n    upgrade_price.set_position(100, button.y + 10)"],[0,"\r\n# "]],"start1":2524,"start2":2524,"length1":270,"length2":102},{"diffs":[[0,"])\r\n"],[-1,"# bh6\r\n        upgrade_button = setup_upgrade_button(buy_button, upgrade_costs[i])\r\n        sprites.set_data_sprite(buy_button, \"upgrade_cost_display\", setup_upgrade_price(buy_button))\r\n\r\n"],[0,"    "]],"start1":3150,"start2":3150,"length1":196,"length2":8}]}]},{"timestamp":1711901597910,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ce.setPosition(1"],[-1,"1"],[1,"0"],[0,"0, button.y + 10"]],"start1":2446,"start2":2446,"length1":33,"length2":33},{"diffs":[[0,"sition(1"],[-1,"1"],[1,"0"],[0,"0, butto"]],"start1":2694,"start2":2694,"length1":17,"length2":17},{"diffs":[[0,"the "],[-1,"effectiveness\n    sprites.setDataSprite(upgrade_button, \"upgrade_cost_display\", setup_upgrade_price(upgrade_button))"],[0,"\n   "]],"start1":2899,"start2":2899,"length1":124,"length2":8},{"diffs":[[0,"bh6\n"],[-1,"//  pps needs to be sum\n"],[0,"func"]],"start1":2938,"start2":2938,"length1":32,"length2":8},{"diffs":[[0,"se_value"],[1,"s"],[0,"\", passi"]],"start1":3490,"start2":3490,"length1":16,"length2":17},{"diffs":[[0,"        "],[-1,"//  /bh6"],[1,"sprites.setDataSprite(buy_button, \"upgrade_cost_display\", setup_upgrade_price(buy_button))"],[0,"\n       "]],"start1":3622,"start2":3622,"length1":24,"length2":106},{"diffs":[[0,"e = 1.1\n"],[1,"            if (!browserEvents.MouseLeft.isPressed()) {\n                pizza_button.scale = 0.9\n            }\n            \n"],[0,"        "]],"start1":5079,"start2":5079,"length1":16,"length2":140},{"diffs":[[0,"e_increase_value"],[1,"s"],[0,"\")\n        pizza"]],"start1":6360,"start2":6360,"length1":32,"length2":33},{"diffs":[[0,") {\n"],[-1,"    let quantity: number;\n    let value: number;\n    \n    pizza_per_second = 0\n    for (let button of sprites.allOfKind(SpriteKind.buy)) {\n        quantity = sprites.readDataNumber(button, \"quantity\")\n        value = sprites.readDataNumber(button, \"passive_increase_value\")\n        pizza_per_second += quantity * value\n    }\n"],[0,"    "]],"start1":7121,"start2":7121,"length1":333,"length2":8}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"e.set_position(1"],[-1,"1"],[1,"0"],[0,"0, button.y + 10"]],"start1":2386,"start2":2386,"length1":33,"length2":33},{"diffs":[[0,"sition(1"],[-1,"1"],[1,"0"],[0,"0, butto"]],"start1":2614,"start2":2614,"length1":17,"length2":17},{"diffs":[[0,"ss\r\n"],[-1,"    sprites.set_data_sprite(upgrade_button, \"upgrade_cost_display\", setup_upgrade_price(upgrade_button))\r\n"],[0,"    "]],"start1":2834,"start2":2834,"length1":114,"length2":8},{"diffs":[[0,"bh6\r"],[-1,"\n# pps needs to be sum\r"],[0,"\n\r\nd"]],"start1":2868,"start2":2868,"length1":31,"length2":8},{"diffs":[[0,"se_value"],[1,"s"],[0,"\", passi"]],"start1":3354,"start2":3354,"length1":16,"length2":17},{"diffs":[[0,"ts[i])\r\n"],[-1,"# /bh6"],[1,"        sprites.set_data_sprite(buy_button, \"upgrade_cost_display\", setup_upgrade_price(buy_button))\r\n"],[0,"\r\n      "]],"start1":3471,"start2":3471,"length1":22,"length2":118},{"diffs":[[0," = 1.1\r\n"],[1,"        if not browserEvents.mouse_left.is_pressed():\r\n            pizza_button.scale = 0.9\r\n"],[0,"    else"]],"start1":4845,"start2":4845,"length1":16,"length2":109},{"diffs":[[0,"e_increase_value"],[1,"s"],[0,"\")\r\n        pizz"]],"start1":6119,"start2":6119,"length1":32,"length2":33},{"diffs":[[0,"click)\r\n"],[-1,"\r\n"],[0,"# /bh2\r\n"]],"start1":6769,"start2":6769,"length1":18,"length2":16},{"diffs":[[0,"):\r\n"],[-1,"    global pizza_per_second\r\n    pizza_per_second = 0\r\n    for button in sprites.all_of_kind(SpriteKind.buy):\r\n        quantity = sprites.read_data_number(button, \"quantity\")\r\n        value = sprites.read_data_number(button, \"passive_increase_value\")\r\n        pizza_per_second += quantity * value\r\n"],[0,"    "]],"start1":6933,"start2":6933,"length1":306,"length2":8},{"diffs":[[0,"fordance"],[1," - the clicking is funky"],[0,"\r\n# upgr"]],"start1":7723,"start2":7723,"length1":16,"length2":40},{"diffs":[[0,"ught"],[-1," - could this be the guided"],[0,"\r\n# "]],"start1":7792,"start2":7792,"length1":35,"length2":8}]}]},{"timestamp":1711902197964,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"etScore("],[-1,"10000"],[0,"0)\nscene"]],"start1":1226,"start2":1226,"length1":21,"length2":16},{"diffs":[[0,"utton, \""],[-1,"shop_item"],[1,"upgrade_button"],[0,"\", butto"]],"start1":2823,"start2":2823,"length1":25,"length2":30},{"diffs":[[0,"y()\n"],[-1,"        info.changeScoreBy(-cost)\n"],[0,"    }\n"],[1,""],[0,"    "]],"start1":6843,"start2":6843,"length1":48,"length2":14},{"diffs":[[0,"bh2\n"],[-1,"//  bh6\nsprites.onOverlap(SpriteKind.collider, SpriteKind.upgrade, function buy_upgrade(collider: Sprite, button: Sprite) {\n    let shop_item: Sprite;\n    let passive_value: number;\n    let cost = sprites.readDataNumber(button, \"upgrade_cost\")\n    if (cost > info.score()) {\n        music.buzzer.play()\n    } else {\n        shop_item = sprites.readDataSprite(button, \"shop_item\")\n        passive_value = sprites.readDataNumber(shop_item, \"passive_increase_value\")\n        sprites.changeDataNumberBy(shop_item, \"passive_increase_value\", passive_value)\n        info.changeScoreBy(-cost)\n    }\n    \n})\n"],[0,"brow"]],"start1":6889,"start2":6889,"length1":607,"length2":8},{"diffs":[[0,"lue\n"],[1,""],[0,"    }\n"],[-1,"    pizza_per_second_sprite.setText(\"\" + pizza_per_second)\n    pizza_per_second_sprite\n"],[0,"    "]],"start1":7372,"start2":7372,"length1":101,"length2":14}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"t_score("],[-1,"10000"],[0,"0)\r\nscen"]],"start1":1236,"start2":1236,"length1":21,"length2":16},{"diffs":[[0,"utton, \""],[-1,"shop_item"],[1,"upgrade_button"],[0,"\", butto"]],"start1":2749,"start2":2749,"length1":25,"length2":30},{"diffs":[[0,"()\r\n"],[-1,"        info.change_score_by(-cost)\r\n"],[0,"    "]],"start1":6605,"start2":6605,"length1":45,"length2":8},{"diffs":[[0,"click)\r\n"],[1,"\r\n"],[0,"# /bh2\r\n"]],"start1":6707,"start2":6707,"length1":16,"length2":18},{"diffs":[[0,"\r\n\r\n"],[-1,"# bh6\r\ndef buy_upgrade(collider, button):\r\n    cost = sprites.read_data_number(button, \"upgrade_cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        shop_item = sprites.read_data_sprite(button, \"shop_item\")\r\n        passive_value = sprites.read_data_number(shop_item, \"passive_increase_value\")\r\n        sprites.change_data_number_by(shop_item, \"passive_increase_value\", passive_value)\r\n        info.change_score_by(-cost)\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade, buy_upgrade)\r\n\r\n"],[0,"def "]],"start1":6723,"start2":6723,"length1":539,"length2":8},{"diffs":[[0,"ue\r\n"],[-1,"    pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n    pizza_per_second_sprite.\r\n"],[0,"    "]],"start1":7171,"start2":7171,"length1":99,"length2":8}]}]},{"timestamp":1711902814016,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ay(button))\n"],[1,"        pizza_per_second += sprites.readDataNumber(button, \"passive_increase_value\")\n        pizza_per_second_sprite.setText(\"\" + pizza_per_second)\n        pizza_per_second_sprite.right = 162\n"],[0,"    }\n    \n "]],"start1":6215,"start2":6215,"length1":24,"length2":216},{"diffs":[[0,"   \n"],[-1,"    collider.destroy()\n})\n//  /bh6"],[1,"})"],[0,"\nbro"]],"start1":7519,"start2":7519,"length1":42,"length2":10},{"diffs":[[0,"econd_sprite"],[-1,".right = 162"],[0,"\n    info.ch"]],"start1":8089,"start2":8089,"length1":36,"length2":24}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"y(button))\r\n"],[1,"        pizza_per_second += sprites.read_data_number(button, \"passive_increase_value\")\r\n        pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n        pizza_per_second_sprite.right = 162\r\n"],[0,"    collider"]],"start1":5978,"start2":5978,"length1":24,"length2":222},{"diffs":[[0,"ider.destroy()\r\n"],[-1,""],[0,"sprites.on_overl"]],"start1":6196,"start2":6196,"length1":32,"length2":32},{"diffs":[[0,"t)\r\n"],[-1,"    collider.destroy()\r\n"],[0,"spri"]],"start1":7213,"start2":7213,"length1":32,"length2":8},{"diffs":[[0,"pgrade)\r"],[-1,"\n# /bh6\r"],[0,"\n\r\ndef m"]],"start1":7282,"start2":7282,"length1":24,"length2":16},{"diffs":[[0,"cond_sprite."],[-1,"right = 162"],[0,"\r\n    info.c"]],"start1":7818,"start2":7818,"length1":35,"length2":24},{"diffs":[[0,"lick"],[-1," w/ pizza"],[0,"\r\n# "]],"start1":8451,"start2":8451,"length1":17,"length2":8},{"diffs":[[0,"rdance\r\n"],[1,""],[0,"#"],[-1," bh6"],[0," upgrade"]],"start1":8620,"start2":8620,"length1":21,"length2":17}]}]},{"timestamp":1711903739583,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"\r\n# /bh2\r\n# "],[-1,"gh2"],[1,"bh6"],[0,"\r\n    upgrad"]],"start1":144,"start2":144,"length1":27,"length2":27},{"diffs":[[0,"reate()\r\n# /"],[-1,"gh2"],[1,"bh6"],[0,"\r\n\r\n# variab"]],"start1":187,"start2":187,"length1":27,"length2":27},{"diffs":[[0," bh4\r\n# "],[-1,"gh2"],[1,"bh6"],[0,"\r\nupgrad"]],"start1":572,"start2":572,"length1":19,"length2":19},{"diffs":[[0,"/bh4\r\n]\r\n# /"],[-1,"gh2"],[1,"bh6"],[0,"\r\n\r\n# sprite"]],"start1":667,"start2":667,"length1":27,"length2":27},{"diffs":[[0,"t_text\r\n\r\n# "],[-1,"gh2"],[1,"bh6"],[0,"\r\ndef setup_"]],"start1":2199,"start2":2199,"length1":27,"length2":27},{"diffs":[[0,"ton\r\n# /"],[-1,"gh2"],[1,"bh6"],[0,"\r\n# pps "]],"start1":2966,"start2":2966,"length1":19,"length2":19},{"diffs":[[0,"[i])\r\n# "],[-1,"gh2"],[1,"bh6"],[0,"\r\n      "]],"start1":3517,"start2":3517,"length1":19,"length2":19},{"diffs":[[0,"i])\r\n# /"],[-1,"gh2"],[1,"bh6"],[0,"\r\n      "]],"start1":3602,"start2":3602,"length1":19,"length2":19},{"diffs":[[0,"h2\r\n\r\n# "],[-1,"gh2"],[1,"bh6"],[0,"\r\ndef bu"]],"start1":6558,"start2":6558,"length1":19,"length2":19},{"diffs":[[0,"de)\r\n# /"],[-1,"gh2"],[1,"bh6"],[0,"\r\n\r\ndef "]],"start1":7112,"start2":7112,"length1":19,"length2":19},{"diffs":[[0,"\r\n# "],[-1,"gh2"],[1,"bh6"],[0," upg"]],"start1":8480,"start2":8480,"length1":11,"length2":11}]}]},{"timestamp":1711904384198,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"bh2\n    //  "],[-1,"gh2"],[1,"bh6"],[0,"\n    export "]],"start1":188,"start2":188,"length1":27,"length2":27},{"diffs":[[0,"e()\n}\n\n//  /"],[-1,"gh2"],[1,"bh6"],[0,"\n//  variabl"]],"start1":247,"start2":247,"length1":27,"length2":27},{"diffs":[[0,"bh4\n//  "],[-1,"gh2"],[1,"bh6"],[0,"\nlet upg"]],"start1":592,"start2":592,"length1":19,"length2":19},{"diffs":[[0,"  /bh4\n//  /"],[-1,"gh2"],[1,"bh6"],[0,"\n//  sprites"]],"start1":665,"start2":665,"length1":27,"length2":27},{"diffs":[[0,"ton."],[-1,"setPosition(143, 50)"],[1,"x = 143"],[0,"\nlet"]],"start1":776,"start2":776,"length1":28,"length2":15},{"diffs":[[0,"on(143, "],[-1,"8"],[1,"9"],[0,"0)\nsprit"]],"start1":1132,"start2":1132,"length1":17,"length2":17},{"diffs":[[0,"n(143, 1"],[-1,"0"],[1,"1"],[0,"0)\n}\n\nma"]],"start1":1666,"start2":1666,"length1":17,"length2":17},{"diffs":[[0,"\n}\n\n//  "],[-1,"gh2"],[1,"bh6"],[0,"\nfunctio"]],"start1":2244,"start2":2244,"length1":19,"length2":19},{"diffs":[[0,"ton\n}\n\n//  /"],[-1,"gh2"],[1,"bh6"],[0,"\n//  pps nee"]],"start1":3042,"start2":3042,"length1":27,"length2":27},{"diffs":[[0,"    //  "],[-1,"gh2"],[1,"bh6"],[0,"\n       "]],"start1":3673,"start2":3673,"length1":19,"length2":19},{"diffs":[[0,"   //  /"],[-1,"gh2"],[1,"bh6"],[0,"\n       "]],"start1":3766,"start2":3766,"length1":19,"length2":19},{"diffs":[[0,"bh2\n//  "],[-1,"gh2"],[1,"bh6"],[0,"\nsprites"]],"start1":6731,"start2":6731,"length1":19,"length2":19},{"diffs":[[0,"ost)\n    }\n    \n"],[1,""],[0,"    collider.des"]],"start1":7315,"start2":7315,"length1":32,"length2":32},{"diffs":[[0,"\n})\n"],[-1,"//  /gh2\n//  bh6\nsprites.onOverlap(SpriteKind.collider, SpriteKind.Food, function collect_ice_cream(collider: Sprite, ice_cream: Sprite) {\n    info.changeScoreBy(pizza_per_second * 120)\n    ice_cream.destroy(effects.hearts, 2000)\n})\n"],[0,"//  "]],"start1":7353,"start2":7353,"length1":241,"length2":8}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"ton."],[-1,"set_position(143, 50)"],[1,"x = 143"],[0,"\r\npi"]],"start1":779,"start2":779,"length1":29,"length2":15},{"diffs":[[0,"on(143, "],[-1,"8"],[1,"9"],[0,"0)\r\nspri"]],"start1":1137,"start2":1137,"length1":17,"length2":17},{"diffs":[[0,"n(143, 1"],[-1,"0"],[1,"1"],[0,"0)\r\nmake"]],"start1":1665,"start2":1665,"length1":17,"length2":17},{"diffs":[[0,"\r\n\r\n"],[-1,"# bh6\r\ndef collect_ice_cream(collider, ice_cream):\r\n    info.change_score_by(pizza_per_second * 120)\r\n    ice_cream.destroy(effects.hearts, 2000)\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.food, collect_ice_cream)\r\n# /bh6\r\n\r\n"],[0,"def "]],"start1":7123,"start2":7123,"length1":242,"length2":8},{"diffs":[[0,"\r\n\r\n"],[-1,"#bh6\r\ndef spawn_ice_cream():\r\n    ice\r\n\r\n"],[0,"\r\n# "]],"start1":8275,"start2":8275,"length1":49,"length2":8},{"diffs":[[0,"is worth\r\n\r\n"],[1,"# bh4 more things you can buy\r\n# bh5 button affordance\r\n"],[0,"# gh2 upgrad"]],"start1":8414,"start2":8414,"length1":24,"length2":80},{"diffs":[[0,"\r\n# "],[-1,"bh4 more things you can buy\r\n# bh5 button affordance"],[1,"achievements\r\n"],[0,"\r\n# "]],"start1":8552,"start2":8552,"length1":60,"length2":22},{"diffs":[[0,"\r\n\r\n"],[-1,"\r\n# achievements\r\n\r\n\r\n"]],"start1":8599,"start2":8599,"length1":26,"length2":4}]},{"type":"edited","filename":"images.g.jres","patch":[{"diffs":[[0," },\n"],[-1,"    \"image3\": {\n        \"data\": \"hwQgACAAAAAAAAAAAAAAAAAAAABERAAAAAAAAAAAAABARERE1V0EAAAAAAAwszMA1N1EVVXdRQAAAACwE9ERS93dVVRV1V0EAAAAOx3REd27XVVFVVXdRQAAANsd0R3R3VtVVVRV1U0AADMzHREdEd2xVVVFVVVNALPd3RMR3RHdEVtVVVRVRTDbEdHREdER3R2xVVVF1UWw3RERHR0RHdEd0VtVRd0EsN0REdHREdER3RFbVdXUBDDRHRHR0R0RHRHdsVXV1AQTER0R0dHdEdERMT1b1U0AExHREREd3RMR3REzW91NABMR0R0RHd09Ed0dMdvdTQATERHdEdHR3RMR3dGz3U0A273b0R3REd3TEd0Rs90EADvbERPdER3RPRHdHb1NAACwHRE90R3dET0d0R0xBAAAMBHd3RMd0R3dE9Ed0QMAABvREdET0RHd3dPRHREDAAAbHRER3REd0d0z0R0RAwAA0xEREd0RHdHdPdEd0QMAABMR3d3dEd0R3T3RHT0AAAAT0R0R3R3REd093REzAAAAE9ET3d0d0RHdvd0xAwAAANMR093dE9HR3bM7AwAAAAAwET3TPRPRMd27AAAAAAAAMBExuzsR3T09CwAAAAAAAAATEbMAM90zuwAAAAAAAAAAMB3RCwC7uwAAAAAAAAAAAAAzuwAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"ice cream\"\n    },\n"],[0,"    "]],"start1":1050,"start2":1050,"length1":821,"length2":8}]},{"type":"edited","filename":"images.g.ts","patch":[{"diffs":[[0,"\n`;\n"],[-1,"            case \"image3\":\n            case \"ice cream\":return img`\n............3333bb..bb33333.....\n........3bb31111d3b311d111d33...\n.......3bdd11111dbd11d11111113..\n.......bdddd1111bd11d111dd11113.\n......3d111dd111b11d111dd33d11d3\n......3d11111dd1d11d111d11d33113\n....bb3d111111dd13dd111d1dd3b31b\n...b3d3dd111111dd13dd11d1dddbbdb\n...3ddd31d111111dd133dddddddb.b.\n..311111d1ddd1111dd11dddddd33...\n..3111111d111dd111dd1111dd3313..\n..bddd1111ddd11dd111d111111113..\n..311ddd111dddd11dd11ddd1111ddb.\n..31111dd111dddd11dd111dddddddb.\n...bd1111d1113ddd11dd1111111d3b.\n...4dd1111d1113ddd11ddd111d333b.\n..4dbdddd11d11133ddddddddddddb..\n.4ddbddddd11d111d33ddddddddd3b..\n.4dddb11ddd11dd111d333dddd3bb...\n.4dd55b111d11dd11111d3333bbb....\n.445555b111d11dddd111111ddb.....\n.4455555bd1d311ddddddddddd3.....\n.45455555bb1d3111ddddddd113.....\n.4554555555b333d1111111113......\n455554555555bbb33d11111d33......\n4d555545555555dbbb3d11d33.......\n4dd5555455555ddddd43333.........\n45dd555544ddddddd4..............\n.45dd5555d44dddd4...............\n..45dd55dddd4444................\n...45dd55444....................\n....44444.......................\n`;\n"],[0,"    "]],"start1":1606,"start2":1606,"length1":1135,"length2":8}]}]},{"timestamp":1711905034406,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n})\n"],[-1,"//  /bh1\n// bh6\nfunction spawn_ice_cream() {\n    let ice_cream = sprites.create(assets.image`ice cream`, SpriteKind.Food)\n    if (randint(1, 2)) {\n        ice_cream.x = randint(0, 160)\n        if (randint(1, 2)) {\n            ice_cream.y = 0\n        } else {\n            ice_cream.y = 120\n        }\n        \n    } else {\n        ice_cream.y = randint(0, 120)\n        if (randint(1, 2)) {\n            ice_cream.x = 0\n        } else {\n            ice_cream.x = 160\n        }\n        \n    }\n    \n}\n\n"]],"start1":8762,"start2":8762,"length1":500,"length2":4}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"Sprites Advanced\": \"github:tomhausen/sprites-advanced#v0.0.2\""],[0,"\n   "]],"start1":318,"start2":318,"length1":80,"length2":8}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," ice"],[-1,"_cream = sprites.create(assets.image(\"ice cream\"), SpriteKind.food)\r\n    if randint(1, 2):\r\n        ice_cream.x = randint(0, 160)\r\n        if randint(1, 2):\r\n            ice_cream.y = 0\r\n        else:\r\n            ice_cream.y = 120\r\n    else:\r\n        ice_cream.y = randint(0, 120)\r\n        if randint(1, 2):\r\n            ice_cream.x = 0\r\n        else:\r\n            ice_cream.x = 160"],[1,"\r\n"],[0,"\r\n\r\n"]],"start1":8560,"start2":8560,"length1":391,"length2":10}]}]},{"timestamp":1711905891862,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ScoreBy("],[-1,"("],[0,"pizza_pe"]],"start1":7524,"start2":7524,"length1":17,"length2":16},{"diffs":[[0,"ond "],[-1,"+ 1) * 120)\n    ice_cream.setVelocity(0, "],[1,"* 12"],[0,"0)\n "]],"start1":7545,"start2":7545,"length1":49,"length2":12},{"diffs":[[0,") {\n"],[-1,"    let vx = randint(0, 1) * 100 - 50\n    let vy = randint(0, 1) * 100 - 50\n"],[0,"    "]],"start1":8807,"start2":8807,"length1":84,"length2":8},{"diffs":[[0,"eate"],[-1,"ProjectileFromSide"],[0,"(ass"]],"start1":8841,"start2":8841,"length1":26,"length2":8},{"diffs":[[0,"m`, "],[-1,"vx, vy)\n    ice_cream.setKind(SpriteKind.Food)\n"],[1,"SpriteKind.Food)\n    if (randint(1, 2)) {\n    "],[0,"    "]],"start1":8867,"start2":8867,"length1":55,"length2":54},{"diffs":[[0,"eam."],[-1,"z = 100\n    timer.after(randint(45000, 75000), spawn_ice_cream)\n}\n\ntimer.after(randint(45000, 75000), spawn_ice_cream)"],[1,"x = randint(0, 160)\n        if (randint(1, 2)) {\n            ice_cream.y = 0\n        } else {\n            ice_cream.y = 120\n        }\n        \n    } else {\n        ice_cream.y = randint(0, 120)\n        if (randint(1, 2)) {\n            ice_cream.x = 0\n        } else {\n            ice_cream.x = 160\n        }\n        \n    }\n    \n}\n"],[0,"\n"]],"start1":8927,"start2":8927,"length1":123,"length2":335}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"ts\": \"*\""],[1,",\n        \"Sprites Advanced\": \"github:tomhausen/sprites-advanced#v0.0.2\""],[0,"\n    },\n"]],"start1":314,"start2":314,"length1":16,"length2":88}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"core_by("],[-1,"("],[0,"pizza_pe"]],"start1":7210,"start2":7210,"length1":17,"length2":16},{"diffs":[[0,"ond "],[-1,"+ 1) * 120)\r\n    ice_cream.set_velocity(0, "],[1,"* 12"],[0,"0)\r\n"]],"start1":7231,"start2":7231,"length1":51,"length2":12},{"diffs":[[0,"):\r\n"],[-1,"    vx = (randint(0, 1) * 100) - 50\r\n    vy = (randint(0, 1) * 100) - 50\r\n"],[0,"    "]],"start1":8553,"start2":8553,"length1":82,"length2":8},{"diffs":[[0,"eate"],[-1,"_projectile_from_side"],[0,"(ass"]],"start1":8583,"start2":8583,"length1":29,"length2":8},{"diffs":[[0,"\"), "],[-1,"vx, vy)\r\n    ice_cream.set_kind(SpriteKind.food)\r\n"],[1,"SpriteKind.food)\r\n    if randint(1, 2):\r\n    "],[0,"    "]],"start1":8611,"start2":8611,"length1":58,"length2":53},{"diffs":[[0,"eam."],[-1,"z = 100\r\n    timer.after(randint(45000, 75000), spawn_ice_cream)\r\ntimer.after(randint(45000, 75000), spawn_ice_cream)\r\n# /bh6"],[1,"x = randint(0, 160)\r\n        if randint(1, 2):\r\n            ice_cream.y = 0\r\n        else:\r\n            ice_cream.y = 120\r\n    else:\r\n        ice_cream.y = randint(0, 120)\r\n        if randint(1, 2):\r\n            ice_cream.x = 0\r\n        else:\r\n            ice_cream.x = 160"],[0,"\r\n\r\n"]],"start1":8670,"start2":8670,"length1":133,"length2":281},{"diffs":[[0,"e\r\n#"],[-1," bh6"],[0," random "],[-1,"ice cream"],[1,"star"],[0," tha"]],"start1":9221,"start2":9221,"length1":29,"length2":20},{"diffs":[[0,"ents"],[-1," or database"],[0,"\r\n\r\n"]],"start1":9267,"start2":9267,"length1":20,"length2":8}]},{"type":"edited","filename":"images.g.jres","patch":[{"diffs":[[0,"\"hwQ"],[-1,"QABAAAAAAAAAAAEREAAAAM0tEXVUEADARvdTdVUUA0xERvVVd"],[1,"gACAAAAAAAAAAAAAAAAAAAABERAAAAAAAAAAAAABARERE1V0EAAAAAAAwszMA1N1EVVXdRQAAAACwE9ERS93dVVRV1V0EAAAAOx3REd27XVVFVVXdRQAAANsd0R3R3VtVVVRV1U0AADMzHREdEd2xVVVFVVVNALPd3RMR3RHdEVtVVVRV"],[0,"RTD"],[1,"bE"],[0,"dHR"],[-1,"HRW9VFExHRERG91QQTEREdEbHdBNsREdER0dsEM90R0RERSwDT0R0RERFLAB0RHREdEb0AHRHRER0RPQATHRERHdEDABMzG9E7MwAAMDEwMwsAAAAAMw"],[1,"EdER3R2xVVVF1UWw3RERHR0RHdEd0VtVRd0EsN0REdHREdER3RFbVdXUBDDRHRHR0R0RHRHdsVXV1AQTER0R0dHdEdERMT1b1U0AExHREREd3RMR3REzW91NABMR0R0RHd09Ed0dMdvdTQATERHdEdHR3RMR3dGz3U0A273b0R3REd3TEd0Rs90EADvbERPdER3RPRHdHb1NAACwHRE90R3dET0d0R0xBAAAMBHd3RMd0R3dE9Ed0QMAABvREdET0RHd3dPRHREDAAAbHRER3REd0d0z0R0RAwAA0xEREd0RHdHdPdEd0QMAABMR3d3dEd0R3T3RHT0AAAAT0R0R3R3REd093REzAAAAE9ET3d0d0RHdvd0xAwAAANMR093dE9HR3bM7AwAAAAAwET3TPRPRMd27AAAAAAAAMBExuzsR3T09CwAAAAAAAAATEbMAM90zuwAAAAAAAAAAMB3RCwC7uwAAAAAAAAAAAAAzuwAAAAAAAA"],[0,"AAAA"]],"start1":1086,"start2":1086,"length1":179,"length2":691}]},{"type":"edited","filename":"images.g.ts","patch":[{"diffs":[[0,"g`\n."],[-1," . . . . 3 3 b 3 3 d d 3 3 . . \n. . . . 3 1 1 d 3 d 1 1 1 1 3 . \n. . . 3 d 1 1 1 d 1 1 1 d 3 1 3 \n. . 3 d d 1 1 1 d d 1 1 1 3 3 3 \n. 3 1 1 d 1 1 1 1 d d 1 1 b . . \n. 3 1 1 1 d 1 1 1 1 1 d 1 1 3 . \n. b d 1 1 1 d 1 1 1 1 1 1 1 3 . \n. 4 b 1 1 1 1 d d 1 1 1 1 d 3 . \n. 4 4 d 1 1 1 1 1 1 d d d b b . \n. 4 d b d 1 1 1 1 1 1 1 1 3 . . \n4 d d 5 b d 1 1 1 1 1 1 1 3 . . \n4 5 d 5 5 b b d 1 1 1 1 d 3 . . \n4 5 5 d 5 5 d b b b d d 3 . . . \n4 5 5 5 d d d d 4 4 b 3 . . . . \n. 4 5 5 5 4 4 4 . . . . . . . . \n. . 4 4 4 . . . . . . . . . . . "],[1,"...........3333bb..bb33333.....\n........3bb31111d3b311d111d33...\n.......3bdd11111dbd11d11111113..\n.......bdddd1111bd11d111dd11113.\n......3d111dd111b11d111dd33d11d3\n......3d11111dd1d11d111d11d33113\n....bb3d111111dd13dd111d1dd3b31b\n...b3d3dd111111dd13dd11d1dddbbdb\n...3ddd31d111111dd133dddddddb.b.\n..311111d1ddd1111dd11dddddd33...\n..3111111d111dd111dd1111dd3313..\n..bddd1111ddd11dd111d111111113..\n..311ddd111dddd11dd11ddd1111ddb.\n..31111dd111dddd11dd111dddddddb.\n...bd1111d1113ddd11dd1111111d3b.\n...4dd1111d1113ddd11ddd111d333b.\n..4dbdddd11d11133ddddddddddddb..\n.4ddbddddd11d111d33ddddddddd3b..\n.4dddb11ddd11dd111d333dddd3bb...\n.4dd55b111d11dd11111d3333bbb....\n.445555b111d11dddd111111ddb.....\n.4455555bd1d311ddddddddddd3.....\n.45455555bb1d3111ddddddd113.....\n.4554555555b333d1111111113......\n455554555555bbb33d11111d33......\n4d555545555555dbbb3d11d33.......\n4dd5555455555ddddd43333.........\n45dd555544ddddddd4..............\n.45dd5555d44dddd4...............\n..45dd55dddd4444................\n...45dd55444....................\n....44444......................."],[0,"\n`;\n"]],"start1":1675,"start2":1675,"length1":534,"length2":1062}]}]},{"timestamp":1711966107969,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"Database\": \"github:tomhausen/tcz-modders-db-storage#a1589331ece24aec40b569b02ef9c5a63fbdf023\""],[0,"\n   "]],"start1":318,"start2":318,"length1":112,"length2":8}]}]},{"timestamp":1711966713505,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"ts\": \"*\""],[1,",\n        \"Database\": \"github:tomhausen/tcz-modders-db-storage#a1589331ece24aec40b569b02ef9c5a63fbdf023\""],[0,"\n    },\n"]],"start1":314,"start2":314,"length1":16,"length2":120}]}]},{"timestamp":1711967319418,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"Database\": \"github:tomhausen/tcz-modders-db-storage#v0.0.2\""],[0,"\n   "]],"start1":318,"start2":318,"length1":78,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"reate()\n"],[1,"    //  /bh2\n    //  gh2\n    export const upgrade = SpriteKind.create()\n"],[0,"}\n\n//  /"],[-1,"b"],[1,"g"],[0,"h2\n//  v"]],"start1":171,"start2":171,"length1":25,"length2":97},{"diffs":[[0,"= 0\n"],[-1,"//  bh5\nlet buttons_to_reset : Sprite[] = []\n//  /bh5\n"],[0,"let "]],"start1":354,"start2":354,"length1":62,"length2":8},{"diffs":[[0,", 1000, "],[-1,"10"],[1,"5"],[0,"000, 100"]],"start1":502,"start2":502,"length1":18,"length2":17},{"diffs":[[0,"0, 10000"],[-1,"0"],[0,"]\n//  bh"]],"start1":513,"start2":513,"length1":17,"length2":16},{"diffs":[[0,"20]\n//  bh4\n"],[1,"//  gh2\nlet upgrade_costs = [100, 500, 5000, 10000, 20000]\n//  bh4\n//  /bh4\n//  /gh2\n"],[0,"//  sprites\n"]],"start1":584,"start2":584,"length1":24,"length2":109},{"diffs":[[0,"ton."],[-1,"x = 143"],[1,"setPosition(143, 50)"],[0,"\nlet"]],"start1":776,"start2":776,"length1":15,"length2":28},{"diffs":[[0,"on(143, "],[-1,"9"],[1,"8"],[0,"0)\nsprit"]],"start1":1145,"start2":1145,"length1":17,"length2":17},{"diffs":[[0,"etScore("],[1,"10000"],[0,"0)\nscene"]],"start1":1239,"start2":1239,"length1":16,"length2":21},{"diffs":[[0,"n(143, 1"],[-1,"1"],[1,"0"],[0,"0)\n}\n\nma"]],"start1":1679,"start2":1679,"length1":17,"length2":17},{"diffs":[[0,"rn cost_text\n}\n\n"],[1,"//  gh2\nfunction setup_upgrade_price(button: Sprite): TextSprite {\n    let cost = sprites.readDataNumber(button, \"upgrade_cost\")\n    let upgrade_price = textsprite.create(\"\" + cost, 5, 2)\n    upgrade_price.setPosition(110, button.y + 10)\n    return upgrade_price\n}\n\nfunction setup_upgrade_button(button: Sprite, upgrade_cost: number): Sprite {\n    let upgrade_button = sprites.create(assets.image`upgrade`, SpriteKind.upgrade)\n    upgrade_button.setPosition(110, button.y)\n    sprites.setDataNumber(upgrade_button, \"upgrade_cost\", upgrade_cost)\n    sprites.setDataSprite(upgrade_button, \"shop_item\", button)\n    //  when we buy we need this to change the effectiveness\n    sprites.setDataSprite(upgrade_button, \"upgrade_cost_display\", setup_upgrade_price(upgrade_button))\n    return upgrade_button\n}\n\n//  /gh2\n//  pps needs to be sum\n"],[0,"function setup_b"]],"start1":2245,"start2":2245,"length1":32,"length2":866},{"diffs":[[0,"on: TextSprite;\n"],[1,"    let upgrade_button: Sprite;\n"],[0,"    let y = 10\n "]],"start1":3138,"start2":3138,"length1":32,"length2":64},{"diffs":[[0,"se_value"],[-1,"s"],[0,"\", passi"]],"start1":3643,"start2":3643,"length1":17,"length2":16},{"diffs":[[0,"_values[i])\n"],[1,"        //  gh2\n        upgrade_button = setup_upgrade_button(buy_button, upgrade_costs[i])\n        //  /gh2\n"],[0,"        spri"]],"start1":3670,"start2":3670,"length1":24,"length2":133},{"diffs":[[0,"1.1\n"],[-1,"            if (!browserEvents.MouseLeft.isPressed()) {\n                pizza_button.scale = 0.9\n            }\n            \n"],[0,"    "]],"start1":5153,"start2":5153,"length1":132,"length2":8},{"diffs":[[0,"n))\n"],[-1,"        pizza_per_second += sprites.readDataNumber(button, \"passive_increase_values\")\n        pizza_per_second_sprite.setText(\"\" + pizza_per_second)\n        pizza_per_second_sprite.right = 162\n"],[0,"    "]],"start1":6236,"start2":6236,"length1":201,"length2":8},{"diffs":[[0,"t_display()\n"],[1,"        info.changeScoreBy(-cost)\n"],[0,"    }\n    \n "]],"start1":6656,"start2":6656,"length1":24,"length2":58},{"diffs":[[0,"bh2\n"],[-1,"browserEvents.onMouseMove(function mouse_move(x: number, y: number) {\n    \n    mouse_x = x\n    mouse_y = y\n})\ngame.onUpdateInterval(1000, function passive_loop() {"],[1,"//  gh2\nsprites.onOverlap(SpriteKind.collider, SpriteKind.upgrade, function buy_upgrade(collider: Sprite, button: Sprite) {\n    let shop_item: Sprite;\n    let passive_value: number;\n    let cost = sprites.readDataNumber(button, \"upgrade_cost\")\n    if (cost > info.score()) {\n        music.buzzer.play()\n    } else {\n        shop_item = sprites.readDataSprite(button, \"shop_item\")\n        passive_value = sprites.readDataNumber(shop_item, \"passive_increase_value\")\n        sprites.changeDataNumberBy(shop_item, \"passive_increase_value\", passive_value)\n        info.changeScoreBy(-cost)\n    }\n    \n    collider.destroy()\n})\n//  /gh2\n//  bh6\nsprites.onOverlap(SpriteKind.collider, SpriteKind.Food, function collect_ice_cream(collider: Sprite, ice_cream: Sprite) {\n    info.changeScoreBy((pizza_per_second + 1) * 120)\n    ice_cream.setVelocity(0, 0)\n    ice_cream.destroy(effects.hearts, 2000)\n})\n//  /bh6\nbrowserEvents.onMouseMove(function mouse_move(x: number, y: number) {\n    \n    mouse_x = x\n    mouse_y = y\n})\ngame.onUpdateInterval(1000, function passive_loop() {\n    let quantity: number;\n    let value: number;\n    \n    pizza_per_second = 0\n    for (let button of sprites.allOfKind(SpriteKind.buy)) {\n        quantity = sprites.readDataNumber(button, \"quantity\")\n        value = sprites.readDataNumber(button, \"passive_increase_value\")\n        pizza_per_second += quantity * value\n    }\n    pizza_per_second_sprite.setText(\"\" + pizza_per_second)\n    pizza_per_second_sprite.right = 162"],[0,"\n   "]],"start1":6744,"start2":6744,"length1":171,"length2":1497},{"diffs":[[0,"e)\n    }\n})\n"],[1,"//  /bh1\n// bh6\nfunction spawn_ice_cream() {\n    let vx = randint(0, 1) * 100 - 50\n    let vy = randint(0, 1) * 100 - 50\n    let ice_cream = sprites.createProjectileFromSide(assets.image`ice cream`, vx, vy)\n    ice_cream.setKind(SpriteKind.Food)\n    ice_cream.z = 100\n    timer.after(randint(45000, 75000), spawn_ice_cream)\n}\n\ntimer.after(randint(45000, 75000), spawn_ice_cream)\n"]],"start1":8792,"start2":8792,"length1":12,"length2":391}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"e()\r\n# /bh2\r"],[1,"\n# gh2\r\n    upgrade = SpriteKind.create()\r\n# /gh2\r"],[0,"\n\r\n# variabl"]],"start1":141,"start2":141,"length1":24,"length2":74},{"diffs":[[0," 0\r\n"],[-1,"# bh5\r\nbuttons_to_reset: List[Sprite] = []\r\n# /bh5\r\n"],[0,"stor"]],"start1":284,"start2":284,"length1":60,"length2":8},{"diffs":[[0,"0,\r\n    "],[-1,"10"],[1,"5"],[0,"000,\r\n# "]],"start1":483,"start2":483,"length1":18,"length2":17},{"diffs":[[0,"   10000"],[-1,"0"],[0,"\r\n# /bh4"]],"start1":506,"start2":506,"length1":17,"length2":16},{"diffs":[[0,"] # bh4\r"],[1,"\n# gh2\r\nupgrade_costs = [\r\n    100,\r\n    500,\r\n    5000,\r\n    10000,\r\n# bh4\r\n    20000\r\n# /bh4\r\n]\r\n# /gh2\r"],[0,"\n\r\n# spr"]],"start1":569,"start2":569,"length1":16,"length2":122},{"diffs":[[0,"ton."],[-1,"x = 143"],[1,"set_position(143, 50)"],[0,"\r\npi"]],"start1":779,"start2":779,"length1":15,"length2":29},{"diffs":[[0,"on(143, "],[-1,"9"],[1,"8"],[0,"0)\r\nspri"]],"start1":1151,"start2":1151,"length1":17,"length2":17},{"diffs":[[0,"t_score("],[1,"10000"],[0,"0)\r\nscen"]],"start1":1250,"start2":1250,"length1":16,"length2":21},{"diffs":[[0,"n(143, 1"],[-1,"1"],[1,"0"],[0,"0)\r\nmake"]],"start1":1679,"start2":1679,"length1":17,"length2":17},{"diffs":[[0,"ost_text\r\n\r\n"],[1,"# gh2\r\ndef setup_upgrade_price(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"upgrade_cost\")\r\n    upgrade_price = textsprite.create(str(cost), 5, 2)\r\n    upgrade_price.set_position(110, button.y + 10)\r\n    return upgrade_price\r\n\r\ndef setup_upgrade_button(button: Sprite, upgrade_cost):\r\n    upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade)\r\n    upgrade_button.set_position(110, button.y)\r\n    sprites.set_data_number(upgrade_button, \"upgrade_cost\", upgrade_cost)\r\n    sprites.set_data_sprite(upgrade_button, \"shop_item\", button) # when we buy we need this to change the effectiveness\r\n    sprites.set_data_sprite(upgrade_button, \"upgrade_cost_display\", setup_upgrade_price(upgrade_button))\r\n    return upgrade_button\r\n# /gh2\r\n# pps needs to be sum\r\n\r\n"],[0,"def setup_bu"]],"start1":2211,"start2":2211,"length1":24,"length2":819},{"diffs":[[0,"se_value"],[-1,"s"],[0,"\", passi"]],"start1":3497,"start2":3497,"length1":17,"length2":16},{"diffs":[[0,"values[i])\r\n"],[1,"# gh2\r\n        upgrade_button = setup_upgrade_button(buy_button, upgrade_costs[i])\r\n# /gh2\r\n"],[0,"        spri"]],"start1":3525,"start2":3525,"length1":24,"length2":116},{"diffs":[[0,".1\r\n"],[-1,"        if not browserEvents.mouse_left.is_pressed():\r\n            pizza_button.scale = 0.9\r\n"],[0,"    "]],"start1":4895,"start2":4895,"length1":101,"length2":8},{"diffs":[[0,"))\r\n"],[-1,"        pizza_per_second += sprites.read_data_number(button, \"passive_increase_values\")\r\n        pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n        pizza_per_second_sprite.right = 162\r\n"],[0,"    "]],"start1":6000,"start2":6000,"length1":207,"length2":8},{"diffs":[[0,"_display()\r\n"],[1,"        info.change_score_by(-cost)\r\n"],[0,"    collider"]],"start1":6413,"start2":6413,"length1":24,"length2":61},{"diffs":[[0,"\r\n\r\n"],[-1,"def mouse_move(x, y):\r\n    global mouse_x, mouse_y\r\n    mouse_x = x\r\n    mouse_y = y\r\nbrowserEvents.on_mouse_move(mouse_move)\r\n\r\ndef passive_loop():"],[1,"# gh2\r\ndef buy_upgrade(collider, button):\r\n    cost = sprites.read_data_number(button, \"upgrade_cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        shop_item = sprites.read_data_sprite(button, \"shop_item\")\r\n        passive_value = sprites.read_data_number(shop_item, \"passive_increase_value\")\r\n        sprites.change_data_number_by(shop_item, \"passive_increase_value\", passive_value)\r\n        info.change_score_by(-cost)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade, buy_upgrade)\r\n# /gh2\r\n\r\n# bh6\r\ndef collect_ice_cream(collider, ice_cream):\r\n    info.change_score_by((pizza_per_second + 1) * 120)\r\n    ice_cream.set_velocity(0, 0)\r\n    ice_cream.destroy(effects.hearts, 2000)\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.food, collect_ice_cream)\r\n# /bh6\r\n\r\ndef mouse_move(x, y):\r\n    global mouse_x, mouse_y\r\n    mouse_x = x\r\n    mouse_y = y\r\nbrowserEvents.on_mouse_move(mouse_move)\r\n\r\ndef passive_loop():\r\n    global pizza_per_second\r\n    pizza_per_second = 0\r\n    for button in sprites.all_of_kind(SpriteKind.buy):\r\n        quantity = sprites.read_data_number(button, \"quantity\")\r\n        value = sprites.read_data_number(button, \"passive_increase_value\")\r\n        pizza_per_second += quantity * value\r\n    pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n    pizza_per_second_sprite.right = 162"],[0,"\r\n  "]],"start1":6574,"start2":6574,"length1":156,"length2":1393},{"diffs":[[0,"/bh1\r\n\r\n"],[1,"#bh6\r\ndef spawn_ice_cream():\r\n    vx = (randint(0, 1) * 100) - 50\r\n    vy = (randint(0, 1) * 100) - 50\r\n    ice_cream = sprites.create_projectile_from_side(assets.image(\"ice cream\"), vx, vy)\r\n    ice_cream.set_kind(SpriteKind.food)\r\n    ice_cream.z = 100\r\n    timer.after(randint(45000, 75000), spawn_ice_cream)\r\ntimer.after(randint(45000, 75000), spawn_ice_cream)\r\n# /bh6\r\n"],[0,"\r\n# bh3 "]],"start1":8559,"start2":8559,"length1":16,"length2":390},{"diffs":[[0,"te click"],[1," w/ pizza"],[0,"\r\n# bh1 "]],"start1":8954,"start2":8954,"length1":16,"length2":25},{"diffs":[[0,"\r\n# "],[-1,"bh4 more things you can buy\r\n# bh5 button affordance - the clicking is funky\r\n# upgrade a type of thing you've bought\r\n# achievements\r\n\r\n# random star that flies in"],[1,"gh2 upgrade a type of thing you've bought - could this be the guided\r\n# bh4 more things you can buy\r\n# bh5 button affordance\r\n# bh6 random ice cream that flies in\r\n\r\n\r\n# achievements or database\r\n"],[0,"\r\n\r\n"]],"start1":9086,"start2":9086,"length1":172,"length2":204}]},{"type":"edited","filename":"images.g.jres","patch":[{"diffs":[[0,"ade\"\n    },\n"],[1,"    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAEREAAAAM0tEXVUEADARvdTdVUUA0xERvVVdRTDdHRHRW9VFExHRERG91QQTEREdEbHdBNsREdER0dsEM90R0RERSwDT0R0RERFLAB0RHREdEb0AHRHRER0RPQATHRERHdEDABMzG9E7MwAAMDEwMwsAAAAAMwAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"ice cream\"\n    },\n"],[0,"    \"*\": {\n "]],"start1":1042,"start2":1042,"length1":24,"length2":325}]},{"type":"edited","filename":"images.g.ts","patch":[{"diffs":[[0,"5 5 5 5 \n`;\n"],[1,"            case \"image3\":\n            case \"ice cream\":return img`\n. . . . . 3 3 b 3 3 d d 3 3 . . \n. . . . 3 1 1 d 3 d 1 1 1 1 3 . \n. . . 3 d 1 1 1 d 1 1 1 d 3 1 3 \n. . 3 d d 1 1 1 d d 1 1 1 3 3 3 \n. 3 1 1 d 1 1 1 1 d d 1 1 b . . \n. 3 1 1 1 d 1 1 1 1 1 d 1 1 3 . \n. b d 1 1 1 d 1 1 1 1 1 1 1 3 . \n. 4 b 1 1 1 1 d d 1 1 1 1 d 3 . \n. 4 4 d 1 1 1 1 1 1 d d d b b . \n. 4 d b d 1 1 1 1 1 1 1 1 3 . . \n4 d d 5 b d 1 1 1 1 1 1 1 3 . . \n4 5 d 5 5 b b d 1 1 1 1 d 3 . . \n4 5 5 d 5 5 d b b b d d 3 . . . \n4 5 5 5 d d d d 4 4 b 3 . . . . \n. 4 5 5 5 4 4 4 . . . . . . . . \n. . 4 4 4 . . . . . . . . . . . \n`;\n"],[0,"        }\n  "]],"start1":1598,"start2":1598,"length1":24,"length2":623}]}]},{"timestamp":1711967505839,"editorVersion":"2.0.1","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"rA4IsQBsUbr04~BdpgAt\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"mixer_play_sound\" id=\"P;Aqg~=1@6VS8A/cT6%8\"><field name=\"sound\">music.baDing</field></block></statement></block></xml>"]],"start1":0,"start2":0,"length1":0,"length2":300}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"namespace SpriteKind {\n    export const buy = SpriteKind.create()\n    export const collider = SpriteKind.create()\n    //  bh2\n    export const upgrade_click = SpriteKind.create()\n}\n\n//  /bh2\n//  variables\nlet pizza_per_click = 1\nlet pizza_per_second = 0\nlet mouse_x = 0\nlet mouse_y = 0\n//  bh5\nlet buttons_to_reset : Sprite[] = []\n//  /bh5\nlet store_items = [\"NEW TOPPINGS\", \"MORE OVENS\", \"MORE WAITERS\", \"MORE CHEFS\", \"MORE RESTAURANTS\"]\n//  bh4\n//  /bh4\nlet starting_cost = [10, 100, 1000, 10000, 100000]\n//  bh4\n//  /bh4\nlet passive_increase_values = [1, 2, 5, 10, 20]\n//  bh4\n//  sprites\nlet pizza_button = sprites.create(assets.image`pizza`, SpriteKind.Player)\npizza_button.x = 143\nlet pizza_per_second_sprite = textsprite.create(\"\" + pizza_per_second, 3, 1)\npizza_per_second_sprite.setBorder(2, 3)\npizza_per_second_sprite.y = 20\npizza_per_second_sprite.right = 162\n//  bh2\nlet click_upgrade_button = sprites.create(assets.image`upgrade`, SpriteKind.upgrade_click)\nclick_upgrade_button.scale = 2\nclick_upgrade_button.setPosition(143, 90)\nsprites.setDataNumber(click_upgrade_button, \"cost\", 100)\n//  /bh2\n//  setup\ninfo.setScore(0)\nscene.setBackgroundColor(1)\n//  bh2\nfunction make_click_upgrade_cost_display() {\n    if (sprites.readDataSprite(click_upgrade_button, \"cost_display\")) {\n        sprites.readDataSprite(click_upgrade_button, \"cost_display\").destroy()\n    }\n    \n    let cost = sprites.readDataNumber(click_upgrade_button, \"cost\")\n    let click_upgrade_cost_display = textsprite.create(\"\" + cost, 5, 2)\n    click_upgrade_cost_display.setPosition(143, 110)\n}\n\nmake_click_upgrade_cost_display()\n//  /bh2\nfunction make_quantity_display(button: Sprite): TextSprite {\n    let quantity = sprites.readDataNumber(button, \"quantity\")\n    let quantity_text = textsprite.create(\"\" + quantity, 5, 2)\n    quantity_text.y = button.y + 10\n    quantity_text.left = 5\n    return quantity_text\n}\n\nfunction make_cost_display(button: Sprite): TextSprite {\n    let cost = sprites.readDataNumber(button, \"cost\")\n    let cost_text = textsprite.create(\"\" + cost, 5, 2)\n    cost_text.y = button.y + 10\n    cost_text.right = 80\n    return cost_text\n}\n\nfunction setup_buttons() {\n    let buy_button: TextSprite;\n    let y = 10\n    for (let i = 0; i < store_items.length; i++) {\n        buy_button = textsprite.create(store_items[i], 5, 2)\n        buy_button.setKind(SpriteKind.buy)\n        buy_button.setFlag(SpriteFlag.Ghost, false)\n        buy_button.y = y\n        buy_button.left = 5\n        sprites.setDataNumber(buy_button, \"quantity\", 0)\n        sprites.setDataNumber(buy_button, \"cost\", starting_cost[i])\n        sprites.setDataNumber(buy_button, \"passive_increase_values\", passive_increase_values[i])\n        sprites.setDataSprite(buy_button, \"quantity_text\", make_quantity_display(buy_button))\n        sprites.setDataSprite(buy_button, \"cost_text\", make_cost_display(buy_button))\n        y += 20\n    }\n}\n\nsetup_buttons()\nbrowserEvents.MouseLeft.onEvent(browserEvents.MouseButtonEvent.Pressed, function reigster_input(x: number, y: number) {\n    let collider = sprites.create(image.create(2, 2), SpriteKind.collider)\n    collider.setPosition(x, y)\n    collider.image.fill(1)\n    collider.lifespan = 500\n    collider.setFlag(SpriteFlag.Invisible, true)\n})\n//  bh3\nfunction animate_click(collider: Sprite) {\n    let pizza = sprites.create(assets.image`pizza`)\n    pizza.scale = 0.25\n    pizza.setPosition(collider.x + 5, collider.y)\n    pizza.setVelocity(randint(-15, 15), -15)\n    pizza.ay = 50\n    pizza.lifespan = 1000\n    let increase = textsprite.create(\"\" + pizza_per_click, 0, 15)\n    increase.setPosition(collider.x + randint(-8, 8), collider.y)\n    increase.vy = -5\n    increase.lifespan = 2000\n}\n\n//  /bh3\n//  bh5\ntimer.background(function setup_mouse_over_loop() {\n    game.onUpdate(function mouse_over_button() {\n        let temp_collider = sprites.create(image.create(1, 1))\n        temp_collider.image.fill(1)\n        temp_collider.setPosition(mouse_x, mouse_y)\n        if (temp_collider.overlapsWith(pizza_button)) {\n            pizza_button.scale = 1.1\n            if (!browserEvents.MouseLeft.isPressed()) {\n                pizza_button.scale = 0.9\n            }\n            \n        } else {\n            pizza_button.scale = 1\n        }\n        \n        temp_collider.destroy()\n    })\n})\n//  /bh5\nsprites.onOverlap(SpriteKind.collider, SpriteKind.Player, function click_pizza(collider: Sprite, pizza: Sprite) {\n    //  bh3\n    animate_click(collider)\n    //  /bh3\n    info.changeScoreBy(pizza_per_click)\n    collider.destroy()\n})\nsprites.onOverlap(SpriteKind.collider, SpriteKind.buy, function buy_more(collider: Sprite, button: Sprite) {\n    \n    let cost = sprites.readDataNumber(button, \"cost\")\n    if (cost > info.score()) {\n        music.buzzer.play()\n    } else {\n        music.baDing.play()\n        info.changeScoreBy(-cost)\n        sprites.changeDataNumberBy(button, \"quantity\", 1)\n        sprites.readDataSprite(button, \"quantity_text\").destroy()\n        sprites.setDataSprite(button, \"quantity_text\", make_quantity_display(button))\n        sprites.changeDataNumberBy(button, \"cost\", Math.idiv(cost, 10) + 1)\n        sprites.readDataSprite(button, \"cost_text\").destroy()\n        sprites.setDataSprite(button, \"cost_text\", make_cost_display(button))\n        pizza_per_second += sprites.readDataNumber(button, \"passive_increase_values\")\n        pizza_per_second_sprite.setText(\"\" + pizza_per_second)\n        pizza_per_second_sprite.right = 162\n    }\n    \n    collider.destroy()\n})\n//  bh2\nsprites.onOverlap(SpriteKind.collider, SpriteKind.upgrade_click, function upgrade_click(collider: Sprite, button: Sprite) {\n    \n    let cost = sprites.readDataNumber(button, \"cost\")\n    if (cost > info.score()) {\n        music.buzzer.play()\n    } else {\n        pizza_per_click *= 2\n        sprites.setDataNumber(button, \"cost\", cost * 10)\n        make_click_upgrade_cost_display()\n    }\n    \n    collider.destroy()\n})\n//  /bh2\nbrowserEvents.onMouseMove(function mouse_move(x: number, y: number) {\n    \n    mouse_x = x\n    mouse_y = y\n})\ngame.onUpdateInterval(1000, function passive_loop() {\n    info.changeScoreBy(pizza_per_second)\n})\n//  bh1\ngame.onUpdateInterval(2000, function falling_pizza() {\n    let pizza: Sprite;\n    let pizzas_to_spawn = Math.ceil(pizza_per_second / 1000)\n    pizzas_to_spawn = Math.constrain(pizzas_to_spawn, 0, 50)\n    for (let i = 0; i < pizzas_to_spawn; i++) {\n        pizza = sprites.create(assets.image`pizza`, SpriteKind.Projectile)\n        pizza.scale = 0.25\n        pizza.bottom = 1\n        pizza.x = randint(6, 154)\n        pizza.z = -100\n        pizza.vy = 5\n        pizza.setFlag(SpriteFlag.AutoDestroy, true)\n    }\n})\n"]],"start1":0,"start2":0,"length1":0,"length2":6668}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"click-for--pizza-py"],[1,"with music\",\n    \"description\": \""],[0,"\",\n "]],"start1":11,"start2":11,"length1":27,"length2":41},{"diffs":[[0," \"*\""],[-1,"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts"],[1,",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"arcade-sprite-data\": \"github:microsoft/arcade-sprite-data#v0.2.1\",\n        \"browser-events\": \"*\",\n        \"Database\": \"github:tomhausen/tcz-modders-db-storage#v0.0.2\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"2.0.1\",\n        \"pxt\": \"8.5.2\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade"],[0,"\"\n  "]],"start1":90,"start2":90,"length1":158,"length2":734},{"diffs":[[0,"itor\": \""],[-1,"blocks"],[1,"py"],[0,"prj\"\n}\n"]],"start1":845,"start2":845,"length1":21,"length2":17}]},{"type":"removed","filename":"main.py","value":"@namespace\r\nclass SpriteKind:\r\n    buy = SpriteKind.create()\r\n    collider = SpriteKind.create()\r\n# bh2\r\n    upgrade_click = SpriteKind.create()\r\n# /bh2\r\n\r\n# variables\r\npizza_per_click = 1\r\npizza_per_second = 0\r\nmouse_x = 0\r\nmouse_y = 0\r\n# bh5\r\nbuttons_to_reset: List[Sprite] = []\r\n# /bh5\r\nstore_items: List[str] = [\r\n    \"NEW TOPPINGS\",\r\n    \"MORE OVENS\",\r\n    \"MORE WAITERS\",\r\n    \"MORE CHEFS\",\r\n# bh4\r\n    \"MORE RESTAURANTS\"\r\n# /bh4\r\n]\r\nstarting_cost = [\r\n    10,\r\n    100,\r\n    1000,\r\n    10000,\r\n# bh4\r\n    100000\r\n# /bh4\r\n]\r\npassive_increase_values = [1, 2, 5, 10, 20] # bh4\r\n\r\n# sprites\r\npizza_button = sprites.create(assets.image(\"pizza\"), SpriteKind.player)\r\npizza_button.x = 143\r\npizza_per_second_sprite = textsprite.create(str(pizza_per_second), 3, 1)\r\npizza_per_second_sprite.set_border(2, 3)\r\npizza_per_second_sprite.y = 20\r\npizza_per_second_sprite.right = 162\r\n# bh2\r\nclick_upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade_click)\r\nclick_upgrade_button.scale = 2\r\nclick_upgrade_button.set_position(143, 90)\r\nsprites.set_data_number(click_upgrade_button, \"cost\", 100)\r\n# /bh2\r\n\r\n# setup\r\ninfo.set_score(0)\r\nscene.set_background_color(1)\r\n\r\n# bh2\r\ndef make_click_upgrade_cost_display():\r\n    if sprites.read_data_sprite(click_upgrade_button, \"cost_display\"):\r\n        sprites.read_data_sprite(click_upgrade_button, \"cost_display\").destroy()\r\n    cost = sprites.read_data_number(click_upgrade_button, \"cost\")\r\n    click_upgrade_cost_display = textsprite.create(str(cost), 5, 2)\r\n    click_upgrade_cost_display.set_position(143, 110)\r\nmake_click_upgrade_cost_display()\r\n# /bh2\r\n\r\ndef make_quantity_display(button: Sprite):\r\n    quantity = sprites.read_data_number(button, \"quantity\")\r\n    quantity_text = textsprite.create(str(quantity), 5, 2)\r\n    quantity_text.y = button.y + 10\r\n    quantity_text.left = 5\r\n    return quantity_text\r\n\r\ndef make_cost_display(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    cost_text = textsprite.create(str(cost), 5, 2)\r\n    cost_text.y = button.y + 10\r\n    cost_text.right = 80\r\n    return cost_text\r\n\r\ndef setup_buttons():\r\n    y = 10\r\n    for i in range(len(store_items)):\r\n        buy_button = textsprite.create(store_items[i], 5, 2)\r\n        buy_button.set_kind(SpriteKind.buy)\r\n        buy_button.set_flag(SpriteFlag.GHOST, False)\r\n        buy_button.y = y\r\n        buy_button.left = 5\r\n        sprites.set_data_number(buy_button, \"quantity\", 0)\r\n        sprites.set_data_number(buy_button, \"cost\", starting_cost[i])\r\n        sprites.set_data_number(buy_button, \"passive_increase_values\", passive_increase_values[i])\r\n        sprites.set_data_sprite(buy_button, \"quantity_text\", make_quantity_display(buy_button))\r\n        sprites.set_data_sprite(buy_button, \"cost_text\", make_cost_display(buy_button))\r\n        y += 20\r\nsetup_buttons()\r\n\r\ndef reigster_input(x, y):\r\n    collider = sprites.create(image.create(2, 2), SpriteKind.collider)\r\n    collider.set_position(x, y)\r\n    collider.image.fill(1)\r\n    collider.lifespan = 500\r\n    collider.set_flag(SpriteFlag.INVISIBLE, True)\r\nbrowserEvents.mouse_left.on_event(browserEvents.MouseButtonEvent.PRESSED, reigster_input)\r\n\r\n# bh3\r\ndef animate_click(collider: Sprite):\r\n    pizza = sprites.create(assets.image(\"pizza\"))\r\n    pizza.scale = 0.25\r\n    pizza.set_position(collider.x + 5, collider.y)\r\n    pizza.set_velocity(randint(-15, 15), -15)\r\n    pizza.ay = 50\r\n    pizza.lifespan = 1000\r\n    increase = textsprite.create(str(pizza_per_click), 0, 15)\r\n    increase.set_position(collider.x + randint(-8, 8), collider.y)\r\n    increase.vy = -5\r\n    increase.lifespan = 2000\r\n# /bh3\r\n\r\n# bh5\r\ndef mouse_over_button():\r\n    temp_collider = sprites.create(image.create(1, 1))\r\n    temp_collider.image.fill(1)\r\n    temp_collider.set_position(mouse_x, mouse_y)\r\n    if temp_collider.overlaps_with(pizza_button):\r\n        pizza_button.scale = 1.1\r\n        if not browserEvents.mouse_left.is_pressed():\r\n            pizza_button.scale = 0.9\r\n    else:\r\n        pizza_button.scale = 1\r\n    temp_collider.destroy()\r\n\r\ndef setup_mouse_over_loop():\r\n    game.on_update(mouse_over_button)\r\ntimer.background(setup_mouse_over_loop)\r\n# /bh5\r\n\r\ndef click_pizza(collider, pizza):\r\n# bh3\r\n    animate_click(collider)\r\n# /bh3\r\n    info.change_score_by(pizza_per_click)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.player, click_pizza)\r\n\r\ndef buy_more(collider, button):\r\n    global pizza_per_second\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        music.ba_ding.play()\r\n        info.change_score_by(-cost)\r\n        sprites.change_data_number_by(button, \"quantity\", 1)\r\n        sprites.read_data_sprite(button, \"quantity_text\").destroy()\r\n        sprites.set_data_sprite(button, \"quantity_text\", make_quantity_display(button))\r\n        sprites.change_data_number_by(button, \"cost\", (cost // 10) + 1)\r\n        sprites.read_data_sprite(button, \"cost_text\").destroy()\r\n        sprites.set_data_sprite(button, \"cost_text\", make_cost_display(button))\r\n        pizza_per_second += sprites.read_data_number(button, \"passive_increase_values\")\r\n        pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n        pizza_per_second_sprite.right = 162\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.buy, buy_more)\r\n\r\n# bh2\r\ndef upgrade_click(collider, button):\r\n    global pizza_per_click\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        pizza_per_click *= 2\r\n        sprites.set_data_number(button, \"cost\", cost * 10)\r\n        make_click_upgrade_cost_display()\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade_click, upgrade_click)\r\n# /bh2\r\n\r\ndef mouse_move(x, y):\r\n    global mouse_x, mouse_y\r\n    mouse_x = x\r\n    mouse_y = y\r\nbrowserEvents.on_mouse_move(mouse_move)\r\n\r\ndef passive_loop():\r\n    info.change_score_by(pizza_per_second)\r\ngame.on_update_interval(1000, passive_loop)\r\n\r\n# bh1\r\ndef falling_pizza():\r\n    pizzas_to_spawn = Math.ceil(pizza_per_second / 1000)\r\n    pizzas_to_spawn = Math.constrain(pizzas_to_spawn, 0, 50)\r\n    for i in range(pizzas_to_spawn):\r\n        pizza = sprites.create(assets.image(\"pizza\"), SpriteKind.projectile)\r\n        pizza.scale = 0.25\r\n        pizza.bottom = 1\r\n        pizza.x = randint(6, 154)\r\n        pizza.z = -100\r\n        pizza.vy = 5\r\n        pizza.set_flag(SpriteFlag.AUTO_DESTROY, True)\r\ngame.on_update_interval(2000, falling_pizza)\r\n# /bh1\r\n\r\n\r\n# bh3 animate click\r\n# bh1 pizza falling\r\n# bh2 upgrade per click - could be the guided\r\n# db? if not show how much a click is worth\r\n\r\n# bh4 more things you can buy\r\n# bh5 button affordance - the clicking is funky\r\n# upgrade a type of thing you've bought\r\n# achievements\r\n\r\n# random star that flies in\r\n\r\n"},{"type":"removed","filename":"tilemap.g.jres","value":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}"},{"type":"removed","filename":"tilemap.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myTiles {\n    //% fixedInstance jres blockIdentity=images._tile\n    export const transparency16 = image.ofBuffer(hex``);\n\n    helpers._registerFactory(\"tile\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"transparency16\":return transparency16;\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"},{"type":"removed","filename":"images.g.jres","value":"{\n    \"image1\": {\n        \"data\": \"hwQgACAAAAAAAAAAAAAAAAAAAAAAu0REAAAAAAAAAAAAAAAAu10VQQAAAAAAAAAAAAAAS11V0eUAAAAAAAAAAAAARtRdXUHlAAAAAAAAAAAAa4dV1R1dBAAAAAAAAAAAu22HJS4dVA4AAAAAAAAAu11VViLiUlQOAAAAAAAAS+Qu1SUiIt7UTQAAAAAAuz0i4tIlIyLeTe4AAAAAQF0lIiJeJTMi3uUAAAAAsFRVJSMiXlUi4tPlAAAAAEtd1SUzIl5V5T5dBADg7k5dVdVVIuJTVVVVVAQA60vrVFXVVu0+VdVVFdQOAL5DtN5VbYfdVVXVXRVUDgC+NENLVWWHXVVV1V1BRQAAuzQzRN1VVlVVVdVWQUUAALtLM0PUVVVV7lJlh9XlAABLu0QzRF1VJSIuZYcR7QQAu7REM7RUVSIi4lUW0d1NALBLSzNDu1UyIuJV0VTkTgAAu0QzQ7vUMiPiVUFdDgAAALBLRENETi0iPlVN5QAAAAAAvkQ0tOvU7lMV1OQAAAAAAOBLRETrvt1VUdTtAAAAAAAAu0REtE7d1UXU5AAAAAAAALBLRETr1NVFTQ4AAAAAAAAAu0REu0tE1O0OAAAAAAAAAOBOtLvr1E3uAAAAAAAAAAAA7kS0u+7k7gAAAAAAAAAAAODuu+vu7g4AAAAAAAAAAAAA6+7u7u4AAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"pizza\"\n    },\n    \"image2\": {\n        \"data\": \"hwQLAAsAAABVVVVVVQUAAFVVVVVVBQAAVVVSVVUFAABVJVJVVQUAAFUiIiIiBQAAJSIiIiIFAABVIiIiIgUAAFUlUlVVBQAAVVVSVVUFAABVVVVVVQUAAFVVVVVVBQAA\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"upgrade\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}"},{"type":"removed","filename":"images.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myImages {\n\n    helpers._registerFactory(\"image\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"image1\":\n            case \"pizza\":return img`\n.............beebbbb............\n............eebbbb4bb...........\n............eb344bb4bb..........\n............e44334bb4bb.........\n............eb433344b4be........\n............4eb43344444be.......\n...........bd4eb43333344bb......\n..........b455d4443333444bb.....\n..........4d5555d444333444bb....\n.........4555555dd4b4443444be...\n........bd5555d555d4bb444444ee..\n........b55ddd665555bb4b44444ee.\n.......bd5555677655554ebb44444eb\n.......43222558855555d4eeb44b4ee\n......b422332ddd555222d4eebbb4be\n......be22232ed55522332db4ebbbbe\n.....bde22222e555e22232edd4bbbbe\n.....b52e222e3555e22222eddd4ebee\n....bd552eee355552e222e355544eee\n....665dd5555555552eee355dd4deee\n...6776555555555555555551554d4ee\n...4885222555dddd6655551544d4eee\n..b45522332555dd677611d444ddeee.\n..4d5222232e55555881d44ddd4eee..\n.bdd5e22222e555115114d54d4ee....\n.b55d2e222e351144d1d55eeee......\nbd5ddd2eee3d444555dd4e..........\nb555115dddd55d544eede...........\n4511d444d5544ee...4de...........\n41d4555d4ee........44...........\n41554eede.......................\n44ee...4e.......................\n`;\n            case \"image2\":\n            case \"upgrade\":return img`\n5 5 5 5 5 5 5 5 5 5 5 \n5 5 5 5 5 2 5 5 5 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 2 2 2 2 2 5 5 5 \n5 5 2 2 2 2 2 2 2 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 5 2 2 2 5 5 5 5 \n5 5 5 5 5 5 5 5 5 5 5 \n`;\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"animation\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"song\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"}]}],"snapshots":[{"timestamp":1711895562423,"editorVersion":"2.0.1","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"mixer_play_sound\"><field name=\"sound\">music.baDing</field></block></statement></block></xml>","main.ts":"","README.md":" ","assets.json":"","main.py":"music.ba_ding.play()","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"with music\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.12.2\",\n        \"pxt\": \"8.5.2\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1711897365722,"editorVersion":"2.0.1","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"mixer_play_sound\"><field name=\"sound\">music.baDing</field></block></statement></block></xml>","main.ts":"","README.md":" ","assets.json":"","main.py":"@namespace\r\nclass SpriteKind:\r\n    buy = SpriteKind.create()\r\n    collider = SpriteKind.create()\r\n# bh2\r\n    upgrade_click = SpriteKind.create()\r\n# /bh2\r\n\r\n# variables\r\npizza_per_click = 1\r\npizza_per_second = 0\r\nmouse_x = 0\r\nmouse_y = 0\r\n# bh5\r\nbuttons_to_reset: List[Sprite] = []\r\n# /bh5\r\nstore_items: List[str] = [\r\n    \"NEW TOPPINGS\",\r\n    \"MORE OVENS\",\r\n    \"MORE WAITERS\",\r\n    \"MORE CHEFS\",\r\n# bh4\r\n    \"MORE RESTAURANTS\"\r\n# /bh4\r\n]\r\nstarting_cost = [\r\n    10,\r\n    100,\r\n    1000,\r\n    10000,\r\n# bh4\r\n    100000\r\n# /bh4\r\n]\r\npassive_increase_values = [1, 2, 5, 10, 20] # bh4\r\n\r\n# sprites\r\npizza_button = sprites.create(assets.image(\"pizza\"), SpriteKind.player)\r\npizza_button.x = 143\r\npizza_per_second_sprite = textsprite.create(str(pizza_per_second), 3, 1)\r\npizza_per_second_sprite.set_border(2, 3)\r\npizza_per_second_sprite.y = 20\r\npizza_per_second_sprite.right = 162\r\n# bh2\r\nclick_upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade_click)\r\nclick_upgrade_button.scale = 2\r\nclick_upgrade_button.set_position(143, 90)\r\nsprites.set_data_number(click_upgrade_button, \"cost\", 100)\r\n# /bh2\r\n\r\n# setup\r\ninfo.set_score(0)\r\nscene.set_background_color(1)\r\n\r\n# bh2\r\ndef make_click_upgrade_cost_display():\r\n    if sprites.read_data_sprite(click_upgrade_button, \"cost_display\"):\r\n        sprites.read_data_sprite(click_upgrade_button, \"cost_display\").destroy()\r\n    cost = sprites.read_data_number(click_upgrade_button, \"cost\")\r\n    click_upgrade_cost_display = textsprite.create(str(cost), 5, 2)\r\n    click_upgrade_cost_display.set_position(143, 110)\r\nmake_click_upgrade_cost_display()\r\n# /bh2\r\n\r\ndef make_quantity_display(button: Sprite):\r\n    quantity = sprites.read_data_number(button, \"quantity\")\r\n    quantity_text = textsprite.create(str(quantity), 5, 2)\r\n    quantity_text.y = button.y + 10\r\n    quantity_text.left = 5\r\n    return quantity_text\r\n\r\ndef make_cost_display(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    cost_text = textsprite.create(str(cost), 5, 2)\r\n    cost_text.y = button.y + 10\r\n    cost_text.right = 80\r\n    return cost_text\r\n\r\ndef setup_buttons():\r\n    y = 10\r\n    for i in range(len(store_items)):\r\n        buy_button = textsprite.create(store_items[i], 5, 2)\r\n        buy_button.set_kind(SpriteKind.buy)\r\n        buy_button.set_flag(SpriteFlag.GHOST, False)\r\n        buy_button.y = y\r\n        buy_button.left = 5\r\n        sprites.set_data_number(buy_button, \"quantity\", 0)\r\n        sprites.set_data_number(buy_button, \"cost\", starting_cost[i])\r\n        sprites.set_data_number(buy_button, \"passive_increase_values\", passive_increase_values[i])\r\n        sprites.set_data_sprite(buy_button, \"quantity_text\", make_quantity_display(buy_button))\r\n        sprites.set_data_sprite(buy_button, \"cost_text\", make_cost_display(buy_button))\r\n        y += 20\r\nsetup_buttons()\r\n\r\ndef reigster_input(x, y):\r\n    collider = sprites.create(image.create(2, 2), SpriteKind.collider)\r\n    collider.set_position(x, y)\r\n    collider.image.fill(1)\r\n    collider.lifespan = 500\r\n    collider.set_flag(SpriteFlag.INVISIBLE, True)\r\nbrowserEvents.mouse_left.on_event(browserEvents.MouseButtonEvent.PRESSED, reigster_input)\r\n\r\n# bh3\r\ndef animate_click(collider: Sprite):\r\n    pizza = sprites.create(assets.image(\"pizza\"))\r\n    pizza.scale = 0.25\r\n    pizza.set_position(collider.x + 5, collider.y)\r\n    pizza.set_velocity(randint(-15, 15), -15)\r\n    pizza.ay = 50\r\n    pizza.lifespan = 1000\r\n    increase = textsprite.create(str(pizza_per_click), 0, 15)\r\n    increase.set_position(collider.x + randint(-8, 8), collider.y)\r\n    increase.vy = -5\r\n    increase.lifespan = 2000\r\n# /bh3\r\n\r\n# bh5\r\ndef mouse_over_button():\r\n    temp_collider = sprites.create(image.create(1, 1))\r\n    temp_collider.image.fill(1)\r\n    temp_collider.set_position(mouse_x, mouse_y)\r\n    if temp_collider.overlaps_with(pizza_button):\r\n        pizza_button.scale = 1.1\r\n        if browserEvents.mouse_left.is_pressed():\r\n            pizza_button.scale = 0.9\r\n    else:\r\n        pizza_button.scale = 1\r\n    temp_collider.destroy()\r\n\r\ndef setup_mouse_over_loop():\r\n    game.on_update(mouse_over_button)\r\ntimer.background(setup_mouse_over_loop)\r\n# /bh5\r\n\r\ndef click_pizza(collider, pizza):\r\n# bh3\r\n    animate_click(collider)\r\n# /bh3\r\n# bh5\r\n    change_size(pizza)\r\n# /bh5\r\n    info.change_score_by(pizza_per_click)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.player, click_pizza)\r\n\r\ndef buy_more(collider, button):\r\n    global pizza_per_second\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        music.ba_ding.play()\r\n        info.change_score_by(-cost)\r\n        sprites.change_data_number_by(button, \"quantity\", 1)\r\n        sprites.read_data_sprite(button, \"quantity_text\").destroy()\r\n        sprites.set_data_sprite(button, \"quantity_text\", make_quantity_display(button))\r\n        sprites.change_data_number_by(button, \"cost\", (cost // 10) + 1)\r\n        sprites.read_data_sprite(button, \"cost_text\").destroy()\r\n        sprites.set_data_sprite(button, \"cost_text\", make_cost_display(button))\r\n        pizza_per_second += sprites.read_data_number(button, \"passive_increase_values\")\r\n        pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n        pizza_per_second_sprite.right = 162\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.buy, buy_more)\r\n\r\n# bh2\r\ndef upgrade_click(collider, button):\r\n    global pizza_per_click\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        pizza_per_click *= 2\r\n        sprites.set_data_number(button, \"cost\", cost * 10)\r\n        make_click_upgrade_cost_display()\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade_click, upgrade_click)\r\n# /bh2\r\n\r\ndef mouse_move(x, y):\r\n    global mouse_x, mouse_y\r\n    mouse_x = x\r\n    mouse_y = y\r\nbrowserEvents.on_mouse_move(mouse_move)\r\n\r\ndef passive_loop():\r\n    info.change_score_by(pizza_per_second)\r\ngame.on_update_interval(1000, passive_loop)\r\n\r\n# bh1\r\ndef falling_pizza():\r\n    pizzas_to_spawn = Math.ceil(pizza_per_second / 1000)\r\n    pizzas_to_spawn = Math.constrain(pizzas_to_spawn, 0, 50)\r\n    for i in range(pizzas_to_spawn):\r\n        pizza = sprites.create(assets.image(\"pizza\"), SpriteKind.projectile)\r\n        pizza.scale = 0.25\r\n        pizza.bottom = 1\r\n        pizza.x = randint(6, 154)\r\n        pizza.z = -100\r\n        pizza.vy = 5\r\n        pizza.set_flag(SpriteFlag.AUTO_DESTROY, True)\r\ngame.on_update_interval(2000, falling_pizza)\r\n# /bh1\r\n\r\n\r\n# bh3 animate click\r\n# bh1 pizza falling\r\n# bh2 upgrade per click - could be the guided\r\n# db? if not show how much a click is worth\r\n\r\n# bh4 more things you can buy\r\n# bh5 button affordance\r\n# upgrade a type of thing you've bought\r\n# achievements\r\n\r\n# random star that flies in\r\n\r\n","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQgACAAAAAAAAAAAAAAAAAAAAAAu0REAAAAAAAAAAAAAAAAu10VQQAAAAAAAAAAAAAAS11V0eUAAAAAAAAAAAAARtRdXUHlAAAAAAAAAAAAa4dV1R1dBAAAAAAAAAAAu22HJS4dVA4AAAAAAAAAu11VViLiUlQOAAAAAAAAS+Qu1SUiIt7UTQAAAAAAuz0i4tIlIyLeTe4AAAAAQF0lIiJeJTMi3uUAAAAAsFRVJSMiXlUi4tPlAAAAAEtd1SUzIl5V5T5dBADg7k5dVdVVIuJTVVVVVAQA60vrVFXVVu0+VdVVFdQOAL5DtN5VbYfdVVXVXRVUDgC+NENLVWWHXVVV1V1BRQAAuzQzRN1VVlVVVdVWQUUAALtLM0PUVVVV7lJlh9XlAABLu0QzRF1VJSIuZYcR7QQAu7REM7RUVSIi4lUW0d1NALBLSzNDu1UyIuJV0VTkTgAAu0QzQ7vUMiPiVUFdDgAAALBLRENETi0iPlVN5QAAAAAAvkQ0tOvU7lMV1OQAAAAAAOBLRETrvt1VUdTtAAAAAAAAu0REtE7d1UXU5AAAAAAAALBLRETr1NVFTQ4AAAAAAAAAu0REu0tE1O0OAAAAAAAAAOBOtLvr1E3uAAAAAAAAAAAA7kS0u+7k7gAAAAAAAAAAAODuu+vu7g4AAAAAAAAAAAAA6+7u7u4AAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"pizza\"\n    },\n    \"image2\": {\n        \"data\": \"hwQLAAsAAABVVVVVVQUAAFVVVVVVBQAAVVVSVVUFAABVJVJVVQUAAFUiIiIiBQAAJSIiIiIFAABVIiIiIgUAAFUlUlVVBQAAVVVSVVUFAABVVVVVVQUAAFVVVVVVBQAA\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"upgrade\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"with music\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"arcade-sprite-data\": \"github:microsoft/arcade-sprite-data#v0.2.1\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.12.2\",\n        \"pxt\": \"8.5.2\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1711899680542,"editorVersion":"2.0.1","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"rA4IsQBsUbr04~BdpgAt\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"mixer_play_sound\" id=\"P;Aqg~=1@6VS8A/cT6%8\"><field name=\"sound\">music.baDing</field></block></statement></block></xml>","main.ts":"","README.md":" \n\n\n> Open this page at [https://tomhausen.github.io/click-for--pizza-py/](https://tomhausen.github.io/click-for--pizza-py/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [/](/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/tomhausen/click-for--pizza-py** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [/](/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/tomhausen/click-for--pizza-py** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/arcade\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","assets.json":"","main.py":"@namespace\r\nclass SpriteKind:\r\n    buy = SpriteKind.create()\r\n    collider = SpriteKind.create()\r\n# bh2\r\n    upgrade_click = SpriteKind.create()\r\n# /bh2\r\n\r\n# variables\r\npizza_per_click = 1\r\npizza_per_second = 0\r\nmouse_x = 0\r\nmouse_y = 0\r\nstore_items: List[str] = [\r\n    \"NEW TOPPINGS\",\r\n    \"MORE OVENS\",\r\n    \"MORE WAITERS\",\r\n    \"MORE CHEFS\",\r\n# bh4\r\n    \"MORE RESTAURANTS\"\r\n# /bh4\r\n]\r\nstarting_cost = [\r\n    10,\r\n    100,\r\n    1000,\r\n    10000,\r\n# bh4\r\n    100000\r\n# /bh4\r\n]\r\npassive_increase_values = [1, 2, 5, 10, 20] # bh4\r\n\r\n# sprites\r\npizza_button = sprites.create(assets.image(\"pizza\"), SpriteKind.player)\r\npizza_button.x = 143\r\npizza_per_second_sprite = textsprite.create(str(pizza_per_second), 3, 1)\r\npizza_per_second_sprite.set_border(2, 3)\r\npizza_per_second_sprite.y = 20\r\npizza_per_second_sprite.right = 162\r\n# bh2\r\nclick_upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade_click)\r\nclick_upgrade_button.scale = 2\r\nclick_upgrade_button.set_position(143, 90)\r\nsprites.set_data_number(click_upgrade_button, \"cost\", 100)\r\n# /bh2\r\n\r\n# setup\r\ninfo.set_score(0)\r\nscene.set_background_color(1)\r\n\r\n# bh2\r\ndef make_click_upgrade_cost_display():\r\n    if sprites.read_data_sprite(click_upgrade_button, \"cost_display\"):\r\n        sprites.read_data_sprite(click_upgrade_button, \"cost_display\").destroy()\r\n    cost = sprites.read_data_number(click_upgrade_button, \"cost\")\r\n    click_upgrade_cost_display = textsprite.create(str(cost), 5, 2)\r\n    click_upgrade_cost_display.set_position(143, 110)\r\nmake_click_upgrade_cost_display()\r\n# /bh2\r\n\r\ndef make_quantity_display(button: Sprite):\r\n    quantity = sprites.read_data_number(button, \"quantity\")\r\n    quantity_text = textsprite.create(str(quantity), 5, 2)\r\n    quantity_text.y = button.y + 10\r\n    quantity_text.left = 5\r\n    return quantity_text\r\n\r\ndef make_cost_display(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    cost_text = textsprite.create(str(cost), 5, 2)\r\n    cost_text.y = button.y + 10\r\n    cost_text.right = 80\r\n    return cost_text\r\n\r\ndef setup_buttons():\r\n    y = 10\r\n    for i in range(len(store_items)):\r\n        buy_button = textsprite.create(store_items[i], 5, 2)\r\n        buy_button.set_kind(SpriteKind.buy)\r\n        buy_button.set_flag(SpriteFlag.GHOST, False)\r\n        buy_button.y = y\r\n        buy_button.left = 5\r\n        sprites.set_data_number(buy_button, \"quantity\", 0)\r\n        sprites.set_data_number(buy_button, \"cost\", starting_cost[i])\r\n        sprites.set_data_number(buy_button, \"passive_increase_values\", passive_increase_values[i])\r\n        sprites.set_data_sprite(buy_button, \"quantity_text\", make_quantity_display(buy_button))\r\n        sprites.set_data_sprite(buy_button, \"cost_text\", make_cost_display(buy_button))\r\n        y += 20\r\nsetup_buttons()\r\n\r\ndef reigster_input(x, y):\r\n    collider = sprites.create(image.create(2, 2), SpriteKind.collider)\r\n    collider.set_position(x, y)\r\n    collider.image.fill(1)\r\n    collider.lifespan = 500\r\n    collider.set_flag(SpriteFlag.INVISIBLE, True)\r\nbrowserEvents.mouse_left.on_event(browserEvents.MouseButtonEvent.PRESSED, reigster_input)\r\n\r\n# bh3\r\ndef animate_click(collider: Sprite):\r\n    pizza = sprites.create(assets.image(\"pizza\"))\r\n    pizza.scale = 0.25\r\n    pizza.set_position(collider.x + 5, collider.y)\r\n    pizza.set_velocity(randint(-15, 15), -15)\r\n    pizza.ay = 50\r\n    pizza.lifespan = 1000\r\n    increase = textsprite.create(str(pizza_per_click), 0, 15)\r\n    increase.set_position(collider.x + randint(-8, 8), collider.y)\r\n    increase.vy = -5\r\n    increase.lifespan = 2000\r\n# /bh3\r\n\r\n# bh5\r\ndef mouse_over_button():\r\n    temp_collider = sprites.create(image.create(1, 1))\r\n    temp_collider.image.fill(1)\r\n    temp_collider.set_position(mouse_x, mouse_y)\r\n    if temp_collider.overlaps_with(pizza_button):\r\n        pizza_button.scale = 1.1\r\n        if not browserEvents.mouse_left.is_pressed():\r\n            pizza_button.scale = 0.9\r\n    else:\r\n        pizza_button.scale = 1\r\n    temp_collider.destroy()\r\n\r\ndef setup_mouse_over_loop():\r\n    game.on_update(mouse_over_button)\r\ntimer.background(setup_mouse_over_loop)\r\n# /bh5\r\n\r\ndef click_pizza(collider, pizza):\r\n# bh3\r\n    animate_click(collider)\r\n# /bh3\r\n    info.change_score_by(pizza_per_click)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.player, click_pizza)\r\n\r\ndef buy_more(collider, button):\r\n    global pizza_per_second\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        music.ba_ding.play()\r\n        info.change_score_by(-cost)\r\n        sprites.change_data_number_by(button, \"quantity\", 1)\r\n        sprites.read_data_sprite(button, \"quantity_text\").destroy()\r\n        sprites.set_data_sprite(button, \"quantity_text\", make_quantity_display(button))\r\n        sprites.change_data_number_by(button, \"cost\", (cost // 10) + 1)\r\n        sprites.read_data_sprite(button, \"cost_text\").destroy()\r\n        sprites.set_data_sprite(button, \"cost_text\", make_cost_display(button))\r\n        pizza_per_second += sprites.read_data_number(button, \"passive_increase_values\")\r\n        pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n        pizza_per_second_sprite.right = 162\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.buy, buy_more)\r\n\r\n# bh2\r\ndef upgrade_click(collider, button):\r\n    global pizza_per_click\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        pizza_per_click *= 2\r\n        sprites.set_data_number(button, \"cost\", cost * 10)\r\n        make_click_upgrade_cost_display()\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade_click, upgrade_click)\r\n# /bh2\r\n\r\ndef mouse_move(x, y):\r\n    global mouse_x, mouse_y\r\n    mouse_x = x\r\n    mouse_y = y\r\nbrowserEvents.on_mouse_move(mouse_move)\r\n\r\ndef passive_loop():\r\n    info.change_score_by(pizza_per_second)\r\ngame.on_update_interval(1000, passive_loop)\r\n\r\n# bh1\r\ndef falling_pizza():\r\n    pizzas_to_spawn = Math.ceil(pizza_per_second / 1000)\r\n    pizzas_to_spawn = Math.constrain(pizzas_to_spawn, 0, 50)\r\n    for i in range(pizzas_to_spawn):\r\n        pizza = sprites.create(assets.image(\"pizza\"), SpriteKind.projectile)\r\n        pizza.scale = 0.25\r\n        pizza.bottom = 1\r\n        pizza.x = randint(6, 154)\r\n        pizza.z = -100\r\n        pizza.vy = 5\r\n        pizza.set_flag(SpriteFlag.AUTO_DESTROY, True)\r\ngame.on_update_interval(2000, falling_pizza)\r\n# /bh1\r\n\r\n\r\n# bh3 animate click\r\n# bh1 pizza falling\r\n# bh2 upgrade per click - could be the guided\r\n# db? if not show how much a click is worth\r\n\r\n# bh4 more things you can buy\r\n# bh5 button affordance - the clicking is funky\r\n# upgrade a type of thing you've bought\r\n# achievements\r\n\r\n# random star that flies in\r\n\r\n","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQgACAAAAAAAAAAAAAAAAAAAAAAu0REAAAAAAAAAAAAAAAAu10VQQAAAAAAAAAAAAAAS11V0eUAAAAAAAAAAAAARtRdXUHlAAAAAAAAAAAAa4dV1R1dBAAAAAAAAAAAu22HJS4dVA4AAAAAAAAAu11VViLiUlQOAAAAAAAAS+Qu1SUiIt7UTQAAAAAAuz0i4tIlIyLeTe4AAAAAQF0lIiJeJTMi3uUAAAAAsFRVJSMiXlUi4tPlAAAAAEtd1SUzIl5V5T5dBADg7k5dVdVVIuJTVVVVVAQA60vrVFXVVu0+VdVVFdQOAL5DtN5VbYfdVVXVXRVUDgC+NENLVWWHXVVV1V1BRQAAuzQzRN1VVlVVVdVWQUUAALtLM0PUVVVV7lJlh9XlAABLu0QzRF1VJSIuZYcR7QQAu7REM7RUVSIi4lUW0d1NALBLSzNDu1UyIuJV0VTkTgAAu0QzQ7vUMiPiVUFdDgAAALBLRENETi0iPlVN5QAAAAAAvkQ0tOvU7lMV1OQAAAAAAOBLRETrvt1VUdTtAAAAAAAAu0REtE7d1UXU5AAAAAAAALBLRETr1NVFTQ4AAAAAAAAAu0REu0tE1O0OAAAAAAAAAOBOtLvr1E3uAAAAAAAAAAAA7kS0u+7k7gAAAAAAAAAAAODuu+vu7g4AAAAAAAAAAAAA6+7u7u4AAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"pizza\"\n    },\n    \"image2\": {\n        \"data\": \"hwQLAAsAAABVVVVVVQUAAFVVVVVVBQAAVVVSVVUFAABVJVJVVQUAAFUiIiIiBQAAJSIiIiIFAABVIiIiIgUAAFUlUlVVBQAAVVVSVVUFAABVVVVVVQUAAFVVVVVVBQAA\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"upgrade\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"with music\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"arcade-sprite-data\": \"github:microsoft/arcade-sprite-data#v0.2.1\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"2.0.1\",\n        \"pxt\": \"8.5.2\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}},{"timestamp":1711901505075,"editorVersion":"2.0.1","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"rA4IsQBsUbr04~BdpgAt\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"mixer_play_sound\" id=\"P;Aqg~=1@6VS8A/cT6%8\"><field name=\"sound\">music.baDing</field></block></statement></block></xml>","main.ts":"","README.md":" \n\n\n> Open this page at [https://tomhausen.github.io/click-for--pizza-py/](https://tomhausen.github.io/click-for--pizza-py/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [/](/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/tomhausen/click-for--pizza-py** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [/](/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/tomhausen/click-for--pizza-py** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/arcade\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","assets.json":"","main.py":"@namespace\r\nclass SpriteKind:\r\n    buy = SpriteKind.create()\r\n    collider = SpriteKind.create()\r\n# bh2\r\n    upgrade_click = SpriteKind.create()\r\n# /bh2\r\n# bh6\r\n    upgrade = SpriteKind.create()\r\n# /bh6\r\n\r\n# variables\r\npizza_per_click = 1\r\npizza_per_second = 0\r\nmouse_x = 0\r\nmouse_y = 0\r\nstore_items: List[str] = [\r\n    \"NEW TOPPINGS\",\r\n    \"MORE OVENS\",\r\n    \"MORE WAITERS\",\r\n    \"MORE CHEFS\",\r\n# bh4\r\n    \"MORE RESTAURANTS\"\r\n# /bh4\r\n]\r\nstarting_cost = [\r\n    10,\r\n    100,\r\n    1000,\r\n    5000,\r\n# bh4\r\n    10000\r\n# /bh4\r\n]\r\npassive_increase_values = [1, 2, 5, 10, 20] # bh4\r\n# bh6\r\nupgrade_costs = [\r\n    100,\r\n    500,\r\n    5000,\r\n    10000,\r\n# bh4\r\n    20000\r\n# /bh4\r\n]\r\n# /bh6\r\n\r\n# sprites\r\npizza_button = sprites.create(assets.image(\"pizza\"), SpriteKind.player)\r\npizza_button.x = 143\r\npizza_per_second_sprite = textsprite.create(str(pizza_per_second), 3, 1)\r\npizza_per_second_sprite.set_border(2, 3)\r\npizza_per_second_sprite.y = 20\r\npizza_per_second_sprite.right = 162\r\n# bh2\r\nclick_upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade_click)\r\nclick_upgrade_button.scale = 2\r\nclick_upgrade_button.set_position(143, 90)\r\nsprites.set_data_number(click_upgrade_button, \"cost\", 100)\r\n# /bh2\r\n\r\n# setup\r\ninfo.set_score(0)\r\nscene.set_background_color(1)\r\n\r\n# bh2\r\ndef make_click_upgrade_cost_display():\r\n    if sprites.read_data_sprite(click_upgrade_button, \"cost_display\"):\r\n        sprites.read_data_sprite(click_upgrade_button, \"cost_display\").destroy()\r\n    cost = sprites.read_data_number(click_upgrade_button, \"cost\")\r\n    click_upgrade_cost_display = textsprite.create(str(cost), 5, 2)\r\n    click_upgrade_cost_display.set_position(143, 110)\r\nmake_click_upgrade_cost_display()\r\n# /bh2\r\n\r\ndef make_quantity_display(button: Sprite):\r\n    quantity = sprites.read_data_number(button, \"quantity\")\r\n    quantity_text = textsprite.create(str(quantity), 5, 2)\r\n    quantity_text.y = button.y + 10\r\n    quantity_text.left = 5\r\n    return quantity_text\r\n\r\ndef make_cost_display(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    cost_text = textsprite.create(str(cost), 5, 2)\r\n    cost_text.y = button.y + 10\r\n    cost_text.right = 80\r\n    return cost_text\r\n\r\n# bh6\r\ndef setup_upgrade_price(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"upgrade_cost\")\r\n    upgrade_price = textsprite.create(str(cost), 5, 2)\r\n    upgrade_price.set_position(110, button.y + 10)\r\n    return upgrade_price\r\n\r\ndef setup_upgrade_button(button: Sprite, upgrade_cost):\r\n    upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade)\r\n    upgrade_button.set_position(110, button.y)\r\n    sprites.set_data_number(upgrade_button, \"upgrade_cost\", upgrade_cost)\r\n    sprites.set_data_sprite(upgrade_button, \"upgrade_button\", button) # when we buy we need this to change the effectiveness\r\n    sprites.set_data_sprite(upgrade_button, \"upgrade_cost_display\", setup_upgrade_price(upgrade_button))\r\n    return upgrade_button\r\n# /bh6\r\n# pps needs to be sum\r\n\r\ndef setup_buttons():\r\n    y = 10\r\n    for i in range(len(store_items)):\r\n        buy_button = textsprite.create(store_items[i], 5, 2)\r\n        buy_button.set_kind(SpriteKind.buy)\r\n        buy_button.set_flag(SpriteFlag.GHOST, False)\r\n        buy_button.y = y\r\n        buy_button.left = 5\r\n        sprites.set_data_number(buy_button, \"quantity\", 0)\r\n        sprites.set_data_number(buy_button, \"cost\", starting_cost[i])\r\n        sprites.set_data_number(buy_button, \"passive_increase_value\", passive_increase_values[i])\r\n# bh6\r\n        upgrade_button = setup_upgrade_button(buy_button, upgrade_costs[i])\r\n# /bh6\r\n        sprites.set_data_sprite(buy_button, \"quantity_text\", make_quantity_display(buy_button))\r\n        sprites.set_data_sprite(buy_button, \"cost_text\", make_cost_display(buy_button))\r\n        y += 20\r\nsetup_buttons()\r\n\r\ndef reigster_input(x, y):\r\n    collider = sprites.create(image.create(2, 2), SpriteKind.collider)\r\n    collider.set_position(x, y)\r\n    collider.image.fill(1)\r\n    collider.lifespan = 500\r\n    collider.set_flag(SpriteFlag.INVISIBLE, True)\r\nbrowserEvents.mouse_left.on_event(browserEvents.MouseButtonEvent.PRESSED, reigster_input)\r\n\r\n# bh3\r\ndef animate_click(collider: Sprite):\r\n    pizza = sprites.create(assets.image(\"pizza\"))\r\n    pizza.scale = 0.25\r\n    pizza.set_position(collider.x + 5, collider.y)\r\n    pizza.set_velocity(randint(-15, 15), -15)\r\n    pizza.ay = 50\r\n    pizza.lifespan = 1000\r\n    increase = textsprite.create(str(pizza_per_click), 0, 15)\r\n    increase.set_position(collider.x + randint(-8, 8), collider.y)\r\n    increase.vy = -5\r\n    increase.lifespan = 2000\r\n# /bh3\r\n\r\n# bh5\r\ndef mouse_over_button():\r\n    temp_collider = sprites.create(image.create(1, 1))\r\n    temp_collider.image.fill(1)\r\n    temp_collider.set_position(mouse_x, mouse_y)\r\n    if temp_collider.overlaps_with(pizza_button):\r\n        pizza_button.scale = 1.1\r\n        if not browserEvents.mouse_left.is_pressed():\r\n            pizza_button.scale = 0.9\r\n    else:\r\n        pizza_button.scale = 1\r\n    temp_collider.destroy()\r\n\r\ndef setup_mouse_over_loop():\r\n    game.on_update(mouse_over_button)\r\ntimer.background(setup_mouse_over_loop)\r\n# /bh5\r\n\r\ndef click_pizza(collider, pizza):\r\n# bh3\r\n    animate_click(collider)\r\n# /bh3\r\n    info.change_score_by(pizza_per_click)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.player, click_pizza)\r\n\r\ndef buy_more(collider, button):\r\n    global pizza_per_second\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        music.ba_ding.play()\r\n        info.change_score_by(-cost)\r\n        sprites.change_data_number_by(button, \"quantity\", 1)\r\n        sprites.read_data_sprite(button, \"quantity_text\").destroy()\r\n        sprites.set_data_sprite(button, \"quantity_text\", make_quantity_display(button))\r\n        sprites.change_data_number_by(button, \"cost\", (cost // 10) + 1)\r\n        sprites.read_data_sprite(button, \"cost_text\").destroy()\r\n        sprites.set_data_sprite(button, \"cost_text\", make_cost_display(button))\r\n        pizza_per_second += sprites.read_data_number(button, \"passive_increase_value\")\r\n        pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n        pizza_per_second_sprite.right = 162\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.buy, buy_more)\r\n\r\n# bh2\r\ndef upgrade_click(collider, button):\r\n    global pizza_per_click\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        pizza_per_click *= 2\r\n        sprites.set_data_number(button, \"cost\", cost * 10)\r\n        make_click_upgrade_cost_display()\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade_click, upgrade_click)\r\n# /bh2\r\n\r\ndef mouse_move(x, y):\r\n    global mouse_x, mouse_y\r\n    mouse_x = x\r\n    mouse_y = y\r\nbrowserEvents.on_mouse_move(mouse_move)\r\n\r\ndef passive_loop():\r\n    global pizza_per_second\r\n    pizza_per_second = 0\r\n    for button in sprites.all_of_kind(SpriteKind.buy):\r\n        quantity = sprites.read_data_number(button, \"quantity\")\r\n        value = sprites.read_data_number(button, \"passive_increase_value\")\r\n        pizza_per_second += quantity * value\r\n    info.change_score_by(pizza_per_second)\r\ngame.on_update_interval(1000, passive_loop)\r\n\r\n# bh1\r\ndef falling_pizza():\r\n    pizzas_to_spawn = Math.ceil(pizza_per_second / 1000)\r\n    pizzas_to_spawn = Math.constrain(pizzas_to_spawn, 0, 50)\r\n    for i in range(pizzas_to_spawn):\r\n        pizza = sprites.create(assets.image(\"pizza\"), SpriteKind.projectile)\r\n        pizza.scale = 0.25\r\n        pizza.bottom = 1\r\n        pizza.x = randint(6, 154)\r\n        pizza.z = -100\r\n        pizza.vy = 5\r\n        pizza.set_flag(SpriteFlag.AUTO_DESTROY, True)\r\ngame.on_update_interval(2000, falling_pizza)\r\n# /bh1\r\n\r\n\r\n# bh3 animate click\r\n# bh1 pizza falling\r\n# bh2 upgrade per click - could be the guided\r\n# db? if not show how much a click is worth\r\n\r\n# bh4 more things you can buy\r\n# bh5 button affordance - the clicking is funky\r\n# upgrade a type of thing you've bought\r\n# achievements\r\n\r\n# random star that flies in\r\n\r\n","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQgACAAAAAAAAAAAAAAAAAAAAAAu0REAAAAAAAAAAAAAAAAu10VQQAAAAAAAAAAAAAAS11V0eUAAAAAAAAAAAAARtRdXUHlAAAAAAAAAAAAa4dV1R1dBAAAAAAAAAAAu22HJS4dVA4AAAAAAAAAu11VViLiUlQOAAAAAAAAS+Qu1SUiIt7UTQAAAAAAuz0i4tIlIyLeTe4AAAAAQF0lIiJeJTMi3uUAAAAAsFRVJSMiXlUi4tPlAAAAAEtd1SUzIl5V5T5dBADg7k5dVdVVIuJTVVVVVAQA60vrVFXVVu0+VdVVFdQOAL5DtN5VbYfdVVXVXRVUDgC+NENLVWWHXVVV1V1BRQAAuzQzRN1VVlVVVdVWQUUAALtLM0PUVVVV7lJlh9XlAABLu0QzRF1VJSIuZYcR7QQAu7REM7RUVSIi4lUW0d1NALBLSzNDu1UyIuJV0VTkTgAAu0QzQ7vUMiPiVUFdDgAAALBLRENETi0iPlVN5QAAAAAAvkQ0tOvU7lMV1OQAAAAAAOBLRETrvt1VUdTtAAAAAAAAu0REtE7d1UXU5AAAAAAAALBLRETr1NVFTQ4AAAAAAAAAu0REu0tE1O0OAAAAAAAAAOBOtLvr1E3uAAAAAAAAAAAA7kS0u+7k7gAAAAAAAAAAAODuu+vu7g4AAAAAAAAAAAAA6+7u7u4AAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"pizza\"\n    },\n    \"image2\": {\n        \"data\": \"hwQLAAsAAABVVVVVVQUAAFVVVVVVBQAAVVVSVVUFAABVJVJVVQUAAFUiIiIiBQAAJSIiIiIFAABVIiIiIgUAAFUlUlVVBQAAVVVSVVUFAABVVVVVVQUAAFVVVVVVBQAA\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"upgrade\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"with music\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"arcade-sprite-data\": \"github:microsoft/arcade-sprite-data#v0.2.1\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"2.0.1\",\n        \"pxt\": \"8.5.2\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}},{"timestamp":1711903739583,"editorVersion":"2.0.1","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"rA4IsQBsUbr04~BdpgAt\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"mixer_play_sound\" id=\"P;Aqg~=1@6VS8A/cT6%8\"><field name=\"sound\">music.baDing</field></block></statement></block></xml>","main.ts":"","README.md":" \n\n\n> Open this page at [https://tomhausen.github.io/click-for--pizza-py/](https://tomhausen.github.io/click-for--pizza-py/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [/](/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/tomhausen/click-for--pizza-py** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [/](/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/tomhausen/click-for--pizza-py** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/arcade\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","assets.json":"","main.py":"@namespace\r\nclass SpriteKind:\r\n    buy = SpriteKind.create()\r\n    collider = SpriteKind.create()\r\n# bh2\r\n    upgrade_click = SpriteKind.create()\r\n# /bh2\r\n# bh6\r\n    upgrade = SpriteKind.create()\r\n# /bh6\r\n\r\n# variables\r\npizza_per_click = 1\r\npizza_per_second = 0\r\nmouse_x = 0\r\nmouse_y = 0\r\nstore_items: List[str] = [\r\n    \"NEW TOPPINGS\",\r\n    \"MORE OVENS\",\r\n    \"MORE WAITERS\",\r\n    \"MORE CHEFS\",\r\n# bh4\r\n    \"MORE RESTAURANTS\"\r\n# /bh4\r\n]\r\nstarting_cost = [\r\n    10,\r\n    100,\r\n    1000,\r\n    5000,\r\n# bh4\r\n    10000\r\n# /bh4\r\n]\r\npassive_increase_values = [1, 2, 5, 10, 20] # bh4\r\n# bh6\r\nupgrade_costs = [\r\n    100,\r\n    500,\r\n    5000,\r\n    10000,\r\n# bh4\r\n    20000\r\n# /bh4\r\n]\r\n# /bh6\r\n\r\n# sprites\r\npizza_button = sprites.create(assets.image(\"pizza\"), SpriteKind.player)\r\npizza_button.x = 143\r\npizza_per_second_sprite = textsprite.create(str(pizza_per_second), 3, 1)\r\npizza_per_second_sprite.set_border(2, 3)\r\npizza_per_second_sprite.y = 20\r\npizza_per_second_sprite.right = 162\r\n# bh2\r\nclick_upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade_click)\r\nclick_upgrade_button.scale = 2\r\nclick_upgrade_button.set_position(143, 90)\r\nsprites.set_data_number(click_upgrade_button, \"cost\", 100)\r\n# /bh2\r\n\r\n# setup\r\ninfo.set_score(100000)\r\nscene.set_background_color(1)\r\n\r\n# bh2\r\ndef make_click_upgrade_cost_display():\r\n    if sprites.read_data_sprite(click_upgrade_button, \"cost_display\"):\r\n        sprites.read_data_sprite(click_upgrade_button, \"cost_display\").destroy()\r\n    cost = sprites.read_data_number(click_upgrade_button, \"cost\")\r\n    click_upgrade_cost_display = textsprite.create(str(cost), 5, 2)\r\n    click_upgrade_cost_display.set_position(143, 110)\r\nmake_click_upgrade_cost_display()\r\n# /bh2\r\n\r\ndef make_quantity_display(button: Sprite):\r\n    quantity = sprites.read_data_number(button, \"quantity\")\r\n    quantity_text = textsprite.create(str(quantity), 5, 2)\r\n    quantity_text.y = button.y + 10\r\n    quantity_text.left = 5\r\n    return quantity_text\r\n\r\ndef make_cost_display(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    cost_text = textsprite.create(str(cost), 5, 2)\r\n    cost_text.y = button.y + 10\r\n    cost_text.right = 80\r\n    return cost_text\r\n\r\n# bh6\r\ndef setup_upgrade_price(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"upgrade_cost\")\r\n    upgrade_price = textsprite.create(str(cost), 5, 2)\r\n    upgrade_price.set_position(110, button.y + 10)\r\n    return upgrade_price\r\n\r\ndef setup_upgrade_button(button: Sprite, upgrade_cost):\r\n    upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade)\r\n    upgrade_button.set_position(110, button.y)\r\n    sprites.set_data_number(upgrade_button, \"upgrade_cost\", upgrade_cost)\r\n    sprites.set_data_sprite(upgrade_button, \"shop_item\", button) # when we buy we need this to change the effectiveness\r\n    sprites.set_data_sprite(upgrade_button, \"upgrade_cost_display\", setup_upgrade_price(upgrade_button))\r\n    return upgrade_button\r\n# /bh6\r\n# pps needs to be sum\r\n\r\ndef setup_buttons():\r\n    y = 10\r\n    for i in range(len(store_items)):\r\n        buy_button = textsprite.create(store_items[i], 5, 2)\r\n        buy_button.set_kind(SpriteKind.buy)\r\n        buy_button.set_flag(SpriteFlag.GHOST, False)\r\n        buy_button.y = y\r\n        buy_button.left = 5\r\n        sprites.set_data_number(buy_button, \"quantity\", 0)\r\n        sprites.set_data_number(buy_button, \"cost\", starting_cost[i])\r\n        sprites.set_data_number(buy_button, \"passive_increase_value\", passive_increase_values[i])\r\n# bh6\r\n        upgrade_button = setup_upgrade_button(buy_button, upgrade_costs[i])\r\n# /bh6\r\n        sprites.set_data_sprite(buy_button, \"quantity_text\", make_quantity_display(buy_button))\r\n        sprites.set_data_sprite(buy_button, \"cost_text\", make_cost_display(buy_button))\r\n        y += 20\r\nsetup_buttons()\r\n\r\ndef reigster_input(x, y):\r\n    collider = sprites.create(image.create(2, 2), SpriteKind.collider)\r\n    collider.set_position(x, y)\r\n    collider.image.fill(1)\r\n    collider.lifespan = 500\r\n    collider.set_flag(SpriteFlag.INVISIBLE, True)\r\nbrowserEvents.mouse_left.on_event(browserEvents.MouseButtonEvent.PRESSED, reigster_input)\r\n\r\n# bh3\r\ndef animate_click(collider: Sprite):\r\n    pizza = sprites.create(assets.image(\"pizza\"))\r\n    pizza.scale = 0.25\r\n    pizza.set_position(collider.x + 5, collider.y)\r\n    pizza.set_velocity(randint(-15, 15), -15)\r\n    pizza.ay = 50\r\n    pizza.lifespan = 1000\r\n    increase = textsprite.create(str(pizza_per_click), 0, 15)\r\n    increase.set_position(collider.x + randint(-8, 8), collider.y)\r\n    increase.vy = -5\r\n    increase.lifespan = 2000\r\n# /bh3\r\n\r\n# bh5\r\ndef mouse_over_button():\r\n    temp_collider = sprites.create(image.create(1, 1))\r\n    temp_collider.image.fill(1)\r\n    temp_collider.set_position(mouse_x, mouse_y)\r\n    if temp_collider.overlaps_with(pizza_button):\r\n        pizza_button.scale = 1.1\r\n    else:\r\n        pizza_button.scale = 1\r\n    temp_collider.destroy()\r\n\r\ndef setup_mouse_over_loop():\r\n    game.on_update(mouse_over_button)\r\ntimer.background(setup_mouse_over_loop)\r\n# /bh5\r\n\r\ndef click_pizza(collider, pizza):\r\n# bh3\r\n    animate_click(collider)\r\n# /bh3\r\n    info.change_score_by(pizza_per_click)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.player, click_pizza)\r\n\r\ndef buy_more(collider, button):\r\n    global pizza_per_second\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        music.ba_ding.play()\r\n        info.change_score_by(-cost)\r\n        sprites.change_data_number_by(button, \"quantity\", 1)\r\n        sprites.read_data_sprite(button, \"quantity_text\").destroy()\r\n        sprites.set_data_sprite(button, \"quantity_text\", make_quantity_display(button))\r\n        sprites.change_data_number_by(button, \"cost\", (cost // 10) + 1)\r\n        sprites.read_data_sprite(button, \"cost_text\").destroy()\r\n        sprites.set_data_sprite(button, \"cost_text\", make_cost_display(button))\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.buy, buy_more)\r\n\r\n# bh2\r\ndef upgrade_click(collider, button):\r\n    global pizza_per_click\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        pizza_per_click *= 2\r\n        sprites.set_data_number(button, \"cost\", cost * 10)\r\n        make_click_upgrade_cost_display()\r\n        info.change_score_by(-cost)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade_click, upgrade_click)\r\n# /bh2\r\n\r\n# bh6\r\ndef buy_upgrade(collider, button):\r\n    cost = sprites.read_data_number(button, \"upgrade_cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        shop_item = sprites.read_data_sprite(button, \"shop_item\")\r\n        passive_value = sprites.read_data_number(shop_item, \"passive_increase_value\")\r\n        sprites.change_data_number_by(shop_item, \"passive_increase_value\", passive_value)\r\n        info.change_score_by(-cost)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade, buy_upgrade)\r\n# /bh6\r\n\r\ndef mouse_move(x, y):\r\n    global mouse_x, mouse_y\r\n    mouse_x = x\r\n    mouse_y = y\r\nbrowserEvents.on_mouse_move(mouse_move)\r\n\r\ndef passive_loop():\r\n    global pizza_per_second\r\n    pizza_per_second = 0\r\n    for button in sprites.all_of_kind(SpriteKind.buy):\r\n        quantity = sprites.read_data_number(button, \"quantity\")\r\n        value = sprites.read_data_number(button, \"passive_increase_value\")\r\n        pizza_per_second += quantity * value\r\n    pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n    pizza_per_second_sprite.right = 162\r\n    info.change_score_by(pizza_per_second)\r\ngame.on_update_interval(1000, passive_loop)\r\n\r\n# bh1\r\ndef falling_pizza():\r\n    pizzas_to_spawn = Math.ceil(pizza_per_second / 1000)\r\n    pizzas_to_spawn = Math.constrain(pizzas_to_spawn, 0, 50)\r\n    for i in range(pizzas_to_spawn):\r\n        pizza = sprites.create(assets.image(\"pizza\"), SpriteKind.projectile)\r\n        pizza.scale = 0.25\r\n        pizza.bottom = 1\r\n        pizza.x = randint(6, 154)\r\n        pizza.z = -100\r\n        pizza.vy = 5\r\n        pizza.set_flag(SpriteFlag.AUTO_DESTROY, True)\r\ngame.on_update_interval(2000, falling_pizza)\r\n# /bh1\r\n\r\n\r\n# bh3 animate click w/ pizza\r\n# bh1 pizza falling\r\n# bh2 upgrade per click - could be the guided\r\n# db? if not show how much a click is worth\r\n\r\n# bh4 more things you can buy\r\n# bh5 button affordance\r\n# bh6 upgrade a type of thing you've bought - could this be the guided\r\n# achievements\r\n\r\n# random star that flies in\r\n\r\n","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQgACAAAAAAAAAAAAAAAAAAAAAAu0REAAAAAAAAAAAAAAAAu10VQQAAAAAAAAAAAAAAS11V0eUAAAAAAAAAAAAARtRdXUHlAAAAAAAAAAAAa4dV1R1dBAAAAAAAAAAAu22HJS4dVA4AAAAAAAAAu11VViLiUlQOAAAAAAAAS+Qu1SUiIt7UTQAAAAAAuz0i4tIlIyLeTe4AAAAAQF0lIiJeJTMi3uUAAAAAsFRVJSMiXlUi4tPlAAAAAEtd1SUzIl5V5T5dBADg7k5dVdVVIuJTVVVVVAQA60vrVFXVVu0+VdVVFdQOAL5DtN5VbYfdVVXVXRVUDgC+NENLVWWHXVVV1V1BRQAAuzQzRN1VVlVVVdVWQUUAALtLM0PUVVVV7lJlh9XlAABLu0QzRF1VJSIuZYcR7QQAu7REM7RUVSIi4lUW0d1NALBLSzNDu1UyIuJV0VTkTgAAu0QzQ7vUMiPiVUFdDgAAALBLRENETi0iPlVN5QAAAAAAvkQ0tOvU7lMV1OQAAAAAAOBLRETrvt1VUdTtAAAAAAAAu0REtE7d1UXU5AAAAAAAALBLRETr1NVFTQ4AAAAAAAAAu0REu0tE1O0OAAAAAAAAAOBOtLvr1E3uAAAAAAAAAAAA7kS0u+7k7gAAAAAAAAAAAODuu+vu7g4AAAAAAAAAAAAA6+7u7u4AAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"pizza\"\n    },\n    \"image2\": {\n        \"data\": \"hwQLAAsAAABVVVVVVQUAAFVVVVVVBQAAVVVSVVUFAABVJVJVVQUAAFUiIiIiBQAAJSIiIiIFAABVIiIiIgUAAFUlUlVVBQAAVVVSVVUFAABVVVVVVQUAAFVVVVVVBQAA\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"upgrade\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"with music\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"arcade-sprite-data\": \"github:microsoft/arcade-sprite-data#v0.2.1\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"2.0.1\",\n        \"pxt\": \"8.5.2\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}},{"timestamp":1711905539832,"editorVersion":"2.0.1","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"rA4IsQBsUbr04~BdpgAt\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"mixer_play_sound\" id=\"P;Aqg~=1@6VS8A/cT6%8\"><field name=\"sound\">music.baDing</field></block></statement></block></xml>","main.ts":"","README.md":" \n\n\n> Open this page at [https://tomhausen.github.io/click-for--pizza-py/](https://tomhausen.github.io/click-for--pizza-py/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [/](/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/tomhausen/click-for--pizza-py** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [/](/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/tomhausen/click-for--pizza-py** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/arcade\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","assets.json":"","main.py":"@namespace\r\nclass SpriteKind:\r\n    buy = SpriteKind.create()\r\n    collider = SpriteKind.create()\r\n# bh2\r\n    upgrade_click = SpriteKind.create()\r\n# /bh2\r\n# gh2\r\n    upgrade = SpriteKind.create()\r\n# /gh2\r\n\r\n# variables\r\npizza_per_click = 1\r\npizza_per_second = 0\r\nmouse_x = 0\r\nmouse_y = 0\r\nstore_items: List[str] = [\r\n    \"NEW TOPPINGS\",\r\n    \"MORE OVENS\",\r\n    \"MORE WAITERS\",\r\n    \"MORE CHEFS\",\r\n# bh4\r\n    \"MORE RESTAURANTS\"\r\n# /bh4\r\n]\r\nstarting_cost = [\r\n    10,\r\n    100,\r\n    1000,\r\n    5000,\r\n# bh4\r\n    10000\r\n# /bh4\r\n]\r\npassive_increase_values = [1, 2, 5, 10, 20] # bh4\r\n# gh2\r\nupgrade_costs = [\r\n    100,\r\n    500,\r\n    5000,\r\n    10000,\r\n# bh4\r\n    20000\r\n# /bh4\r\n]\r\n# /gh2\r\n\r\n# sprites\r\npizza_button = sprites.create(assets.image(\"pizza\"), SpriteKind.player)\r\npizza_button.set_position(143, 50)\r\npizza_per_second_sprite = textsprite.create(str(pizza_per_second), 3, 1)\r\npizza_per_second_sprite.set_border(2, 3)\r\npizza_per_second_sprite.y = 20\r\npizza_per_second_sprite.right = 162\r\n# bh2\r\nclick_upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade_click)\r\nclick_upgrade_button.scale = 2\r\nclick_upgrade_button.set_position(143, 80)\r\nsprites.set_data_number(click_upgrade_button, \"cost\", 100)\r\n# /bh2\r\n\r\n# setup\r\ninfo.set_score(100000)\r\nscene.set_background_color(1)\r\n\r\n# bh2\r\ndef make_click_upgrade_cost_display():\r\n    if sprites.read_data_sprite(click_upgrade_button, \"cost_display\"):\r\n        sprites.read_data_sprite(click_upgrade_button, \"cost_display\").destroy()\r\n    cost = sprites.read_data_number(click_upgrade_button, \"cost\")\r\n    click_upgrade_cost_display = textsprite.create(str(cost), 5, 2)\r\n    click_upgrade_cost_display.set_position(143, 100)\r\nmake_click_upgrade_cost_display()\r\n# /bh2\r\n\r\ndef make_quantity_display(button: Sprite):\r\n    quantity = sprites.read_data_number(button, \"quantity\")\r\n    quantity_text = textsprite.create(str(quantity), 5, 2)\r\n    quantity_text.y = button.y + 10\r\n    quantity_text.left = 5\r\n    return quantity_text\r\n\r\ndef make_cost_display(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    cost_text = textsprite.create(str(cost), 5, 2)\r\n    cost_text.y = button.y + 10\r\n    cost_text.right = 80\r\n    return cost_text\r\n\r\n# gh2\r\ndef setup_upgrade_price(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"upgrade_cost\")\r\n    upgrade_price = textsprite.create(str(cost), 5, 2)\r\n    upgrade_price.set_position(110, button.y + 10)\r\n    return upgrade_price\r\n\r\ndef setup_upgrade_button(button: Sprite, upgrade_cost):\r\n    upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade)\r\n    upgrade_button.set_position(110, button.y)\r\n    sprites.set_data_number(upgrade_button, \"upgrade_cost\", upgrade_cost)\r\n    sprites.set_data_sprite(upgrade_button, \"shop_item\", button) # when we buy we need this to change the effectiveness\r\n    sprites.set_data_sprite(upgrade_button, \"upgrade_cost_display\", setup_upgrade_price(upgrade_button))\r\n    return upgrade_button\r\n# /gh2\r\n# pps needs to be sum\r\n\r\ndef setup_buttons():\r\n    y = 10\r\n    for i in range(len(store_items)):\r\n        buy_button = textsprite.create(store_items[i], 5, 2)\r\n        buy_button.set_kind(SpriteKind.buy)\r\n        buy_button.set_flag(SpriteFlag.GHOST, False)\r\n        buy_button.y = y\r\n        buy_button.left = 5\r\n        sprites.set_data_number(buy_button, \"quantity\", 0)\r\n        sprites.set_data_number(buy_button, \"cost\", starting_cost[i])\r\n        sprites.set_data_number(buy_button, \"passive_increase_value\", passive_increase_values[i])\r\n# gh2\r\n        upgrade_button = setup_upgrade_button(buy_button, upgrade_costs[i])\r\n# /gh2\r\n        sprites.set_data_sprite(buy_button, \"quantity_text\", make_quantity_display(buy_button))\r\n        sprites.set_data_sprite(buy_button, \"cost_text\", make_cost_display(buy_button))\r\n        y += 20\r\nsetup_buttons()\r\n\r\ndef reigster_input(x, y):\r\n    collider = sprites.create(image.create(2, 2), SpriteKind.collider)\r\n    collider.set_position(x, y)\r\n    collider.image.fill(1)\r\n    collider.lifespan = 500\r\n    collider.set_flag(SpriteFlag.INVISIBLE, True)\r\nbrowserEvents.mouse_left.on_event(browserEvents.MouseButtonEvent.PRESSED, reigster_input)\r\n\r\n# bh3\r\ndef animate_click(collider: Sprite):\r\n    pizza = sprites.create(assets.image(\"pizza\"))\r\n    pizza.scale = 0.25\r\n    pizza.set_position(collider.x + 5, collider.y)\r\n    pizza.set_velocity(randint(-15, 15), -15)\r\n    pizza.ay = 50\r\n    pizza.lifespan = 1000\r\n    increase = textsprite.create(str(pizza_per_click), 0, 15)\r\n    increase.set_position(collider.x + randint(-8, 8), collider.y)\r\n    increase.vy = -5\r\n    increase.lifespan = 2000\r\n# /bh3\r\n\r\n# bh5\r\ndef mouse_over_button():\r\n    temp_collider = sprites.create(image.create(1, 1))\r\n    temp_collider.image.fill(1)\r\n    temp_collider.set_position(mouse_x, mouse_y)\r\n    if temp_collider.overlaps_with(pizza_button):\r\n        pizza_button.scale = 1.1\r\n    else:\r\n        pizza_button.scale = 1\r\n    temp_collider.destroy()\r\n\r\ndef setup_mouse_over_loop():\r\n    game.on_update(mouse_over_button)\r\ntimer.background(setup_mouse_over_loop)\r\n# /bh5\r\n\r\ndef click_pizza(collider, pizza):\r\n# bh3\r\n    animate_click(collider)\r\n# /bh3\r\n    info.change_score_by(pizza_per_click)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.player, click_pizza)\r\n\r\ndef buy_more(collider, button):\r\n    global pizza_per_second\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        music.ba_ding.play()\r\n        info.change_score_by(-cost)\r\n        sprites.change_data_number_by(button, \"quantity\", 1)\r\n        sprites.read_data_sprite(button, \"quantity_text\").destroy()\r\n        sprites.set_data_sprite(button, \"quantity_text\", make_quantity_display(button))\r\n        sprites.change_data_number_by(button, \"cost\", (cost // 10) + 1)\r\n        sprites.read_data_sprite(button, \"cost_text\").destroy()\r\n        sprites.set_data_sprite(button, \"cost_text\", make_cost_display(button))\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.buy, buy_more)\r\n\r\n# bh2\r\ndef upgrade_click(collider, button):\r\n    global pizza_per_click\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        pizza_per_click *= 2\r\n        sprites.set_data_number(button, \"cost\", cost * 10)\r\n        make_click_upgrade_cost_display()\r\n        info.change_score_by(-cost)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade_click, upgrade_click)\r\n# /bh2\r\n\r\n# gh2\r\ndef buy_upgrade(collider, button):\r\n    cost = sprites.read_data_number(button, \"upgrade_cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        shop_item = sprites.read_data_sprite(button, \"shop_item\")\r\n        passive_value = sprites.read_data_number(shop_item, \"passive_increase_value\")\r\n        sprites.change_data_number_by(shop_item, \"passive_increase_value\", passive_value)\r\n        info.change_score_by(-cost)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade, buy_upgrade)\r\n# /gh2\r\n\r\n# bh6\r\ndef collect_ice_cream(collider, ice_cream):\r\n    info.change_score_by((pizza_per_second + 1) * 120)\r\n    ice_cream.set_velocity(0, 0)\r\n    ice_cream.destroy(effects.hearts, 2000)\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.food, collect_ice_cream)\r\n# /bh6\r\n\r\ndef mouse_move(x, y):\r\n    global mouse_x, mouse_y\r\n    mouse_x = x\r\n    mouse_y = y\r\nbrowserEvents.on_mouse_move(mouse_move)\r\n\r\ndef passive_loop():\r\n    global pizza_per_second\r\n    pizza_per_second = 0\r\n    for button in sprites.all_of_kind(SpriteKind.buy):\r\n        quantity = sprites.read_data_number(button, \"quantity\")\r\n        value = sprites.read_data_number(button, \"passive_increase_value\")\r\n        pizza_per_second += quantity * value\r\n    pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n    pizza_per_second_sprite.right = 162\r\n    info.change_score_by(pizza_per_second)\r\ngame.on_update_interval(1000, passive_loop)\r\n\r\n# bh1\r\ndef falling_pizza():\r\n    pizzas_to_spawn = Math.ceil(pizza_per_second / 1000)\r\n    pizzas_to_spawn = Math.constrain(pizzas_to_spawn, 0, 50)\r\n    for i in range(pizzas_to_spawn):\r\n        pizza = sprites.create(assets.image(\"pizza\"), SpriteKind.projectile)\r\n        pizza.scale = 0.25\r\n        pizza.bottom = 1\r\n        pizza.x = randint(6, 154)\r\n        pizza.z = -100\r\n        pizza.vy = 5\r\n        pizza.set_flag(SpriteFlag.AUTO_DESTROY, True)\r\ngame.on_update_interval(2000, falling_pizza)\r\n# /bh1\r\n\r\n#bh6\r\ndef spawn_ice_cream():\r\n    vx = (randint(0, 1) * 100) - 50\r\n    vy = (randint(0, 1) * 100) - 50\r\n    ice_cream = sprites.create_projectile_from_side(assets.image(\"ice cream\"), vx, vy)\r\n    ice_cream.set_kind(SpriteKind.food)\r\n    timer.after(randint(45000, 75000), spawn_ice_cream)\r\n# timer.after(randint(45000, 75000), spawn_ice_cream)\r\nspawn_ice_cream()\r\n# /bh6\r\n\r\n# bh3 animate click w/ pizza\r\n# bh1 pizza falling\r\n# bh2 upgrade per click - could be the guided\r\n# db? if not show how much a click is worth\r\n\r\n# gh2 upgrade a type of thing you've bought - could this be the guided\r\n# bh4 more things you can buy\r\n# bh5 button affordance\r\n# bh6 random ice cream that flies in\r\n\r\n\r\n# achievements\r\n\r\n\r\n","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQgACAAAAAAAAAAAAAAAAAAAAAAu0REAAAAAAAAAAAAAAAAu10VQQAAAAAAAAAAAAAAS11V0eUAAAAAAAAAAAAARtRdXUHlAAAAAAAAAAAAa4dV1R1dBAAAAAAAAAAAu22HJS4dVA4AAAAAAAAAu11VViLiUlQOAAAAAAAAS+Qu1SUiIt7UTQAAAAAAuz0i4tIlIyLeTe4AAAAAQF0lIiJeJTMi3uUAAAAAsFRVJSMiXlUi4tPlAAAAAEtd1SUzIl5V5T5dBADg7k5dVdVVIuJTVVVVVAQA60vrVFXVVu0+VdVVFdQOAL5DtN5VbYfdVVXVXRVUDgC+NENLVWWHXVVV1V1BRQAAuzQzRN1VVlVVVdVWQUUAALtLM0PUVVVV7lJlh9XlAABLu0QzRF1VJSIuZYcR7QQAu7REM7RUVSIi4lUW0d1NALBLSzNDu1UyIuJV0VTkTgAAu0QzQ7vUMiPiVUFdDgAAALBLRENETi0iPlVN5QAAAAAAvkQ0tOvU7lMV1OQAAAAAAOBLRETrvt1VUdTtAAAAAAAAu0REtE7d1UXU5AAAAAAAALBLRETr1NVFTQ4AAAAAAAAAu0REu0tE1O0OAAAAAAAAAOBOtLvr1E3uAAAAAAAAAAAA7kS0u+7k7gAAAAAAAAAAAODuu+vu7g4AAAAAAAAAAAAA6+7u7u4AAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"pizza\"\n    },\n    \"image2\": {\n        \"data\": \"hwQLAAsAAABVVVVVVQUAAFVVVVVVBQAAVVVSVVUFAABVJVJVVQUAAFUiIiIiBQAAJSIiIiIFAABVIiIiIgUAAFUlUlVVBQAAVVVSVVUFAABVVVVVVQUAAFVVVVVVBQAA\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"upgrade\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAEREAAAAM0tEXVUEADARvdTdVUUA0xERvVVdRTDdHRHRW9VFExHRERG91QQTEREdEbHdBNsREdER0dsEM90R0RERSwDT0R0RERFLAB0RHREdEb0AHRHRER0RPQATHRERHdEDABMzG9E7MwAAMDEwMwsAAAAAMwAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"ice cream\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"with music\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"arcade-sprite-data\": \"github:microsoft/arcade-sprite-data#v0.2.1\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"2.0.1\",\n        \"pxt\": \"8.5.2\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}},{"timestamp":1711966107969,"editorVersion":"2.0.1","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"rA4IsQBsUbr04~BdpgAt\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"mixer_play_sound\" id=\"P;Aqg~=1@6VS8A/cT6%8\"><field name=\"sound\">music.baDing</field></block></statement></block></xml>","main.ts":"","README.md":" \n\n\n> Open this page at [https://tomhausen.github.io/click-for--pizza-py/](https://tomhausen.github.io/click-for--pizza-py/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [/](/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/tomhausen/click-for--pizza-py** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [/](/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/tomhausen/click-for--pizza-py** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/arcade\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","assets.json":"","main.py":"@namespace\r\nclass SpriteKind:\r\n    buy = SpriteKind.create()\r\n    collider = SpriteKind.create()\r\n# bh2\r\n    upgrade_click = SpriteKind.create()\r\n# /bh2\r\n# gh2\r\n    upgrade = SpriteKind.create()\r\n# /gh2\r\n\r\n# variables\r\npizza_per_click = 1\r\npizza_per_second = 0\r\nmouse_x = 0\r\nmouse_y = 0\r\nstore_items: List[str] = [\r\n    \"NEW TOPPINGS\",\r\n    \"MORE OVENS\",\r\n    \"MORE WAITERS\",\r\n    \"MORE CHEFS\",\r\n# bh4\r\n    \"MORE RESTAURANTS\"\r\n# /bh4\r\n]\r\nstarting_cost = [\r\n    10,\r\n    100,\r\n    1000,\r\n    5000,\r\n# bh4\r\n    10000\r\n# /bh4\r\n]\r\npassive_increase_values = [1, 2, 5, 10, 20] # bh4\r\n# gh2\r\nupgrade_costs = [\r\n    100,\r\n    500,\r\n    5000,\r\n    10000,\r\n# bh4\r\n    20000\r\n# /bh4\r\n]\r\n# /gh2\r\n\r\n# sprites\r\npizza_button = sprites.create(assets.image(\"pizza\"), SpriteKind.player)\r\npizza_button.set_position(143, 50)\r\npizza_per_second_sprite = textsprite.create(str(pizza_per_second), 3, 1)\r\npizza_per_second_sprite.set_border(2, 3)\r\npizza_per_second_sprite.y = 20\r\npizza_per_second_sprite.right = 162\r\n# bh2\r\nclick_upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade_click)\r\nclick_upgrade_button.scale = 2\r\nclick_upgrade_button.set_position(143, 80)\r\nsprites.set_data_number(click_upgrade_button, \"cost\", 100)\r\n# /bh2\r\n\r\n# setup\r\ninfo.set_score(100000)\r\nscene.set_background_color(1)\r\n\r\n# bh2\r\ndef make_click_upgrade_cost_display():\r\n    if sprites.read_data_sprite(click_upgrade_button, \"cost_display\"):\r\n        sprites.read_data_sprite(click_upgrade_button, \"cost_display\").destroy()\r\n    cost = sprites.read_data_number(click_upgrade_button, \"cost\")\r\n    click_upgrade_cost_display = textsprite.create(str(cost), 5, 2)\r\n    click_upgrade_cost_display.set_position(143, 100)\r\nmake_click_upgrade_cost_display()\r\n# /bh2\r\n\r\ndef make_quantity_display(button: Sprite):\r\n    quantity = sprites.read_data_number(button, \"quantity\")\r\n    quantity_text = textsprite.create(str(quantity), 5, 2)\r\n    quantity_text.y = button.y + 10\r\n    quantity_text.left = 5\r\n    return quantity_text\r\n\r\ndef make_cost_display(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    cost_text = textsprite.create(str(cost), 5, 2)\r\n    cost_text.y = button.y + 10\r\n    cost_text.right = 80\r\n    return cost_text\r\n\r\n# gh2\r\ndef setup_upgrade_price(button: Sprite):\r\n    cost = sprites.read_data_number(button, \"upgrade_cost\")\r\n    upgrade_price = textsprite.create(str(cost), 5, 2)\r\n    upgrade_price.set_position(110, button.y + 10)\r\n    return upgrade_price\r\n\r\ndef setup_upgrade_button(button: Sprite, upgrade_cost):\r\n    upgrade_button = sprites.create(assets.image(\"upgrade\"), SpriteKind.upgrade)\r\n    upgrade_button.set_position(110, button.y)\r\n    sprites.set_data_number(upgrade_button, \"upgrade_cost\", upgrade_cost)\r\n    sprites.set_data_sprite(upgrade_button, \"shop_item\", button) # when we buy we need this to change the effectiveness\r\n    sprites.set_data_sprite(upgrade_button, \"upgrade_cost_display\", setup_upgrade_price(upgrade_button))\r\n    return upgrade_button\r\n# /gh2\r\n# pps needs to be sum\r\n\r\ndef setup_buttons():\r\n    y = 10\r\n    for i in range(len(store_items)):\r\n        buy_button = textsprite.create(store_items[i], 5, 2)\r\n        buy_button.set_kind(SpriteKind.buy)\r\n        buy_button.set_flag(SpriteFlag.GHOST, False)\r\n        buy_button.y = y\r\n        buy_button.left = 5\r\n        sprites.set_data_number(buy_button, \"quantity\", 0)\r\n        sprites.set_data_number(buy_button, \"cost\", starting_cost[i])\r\n        sprites.set_data_number(buy_button, \"passive_increase_value\", passive_increase_values[i])\r\n# gh2\r\n        upgrade_button = setup_upgrade_button(buy_button, upgrade_costs[i])\r\n# /gh2\r\n        sprites.set_data_sprite(buy_button, \"quantity_text\", make_quantity_display(buy_button))\r\n        sprites.set_data_sprite(buy_button, \"cost_text\", make_cost_display(buy_button))\r\n        y += 20\r\nsetup_buttons()\r\n\r\ndef reigster_input(x, y):\r\n    collider = sprites.create(image.create(2, 2), SpriteKind.collider)\r\n    collider.set_position(x, y)\r\n    collider.image.fill(1)\r\n    collider.lifespan = 500\r\n    collider.set_flag(SpriteFlag.INVISIBLE, True)\r\nbrowserEvents.mouse_left.on_event(browserEvents.MouseButtonEvent.PRESSED, reigster_input)\r\n\r\n# bh3\r\ndef animate_click(collider: Sprite):\r\n    pizza = sprites.create(assets.image(\"pizza\"))\r\n    pizza.scale = 0.25\r\n    pizza.set_position(collider.x + 5, collider.y)\r\n    pizza.set_velocity(randint(-15, 15), -15)\r\n    pizza.ay = 50\r\n    pizza.lifespan = 1000\r\n    increase = textsprite.create(str(pizza_per_click), 0, 15)\r\n    increase.set_position(collider.x + randint(-8, 8), collider.y)\r\n    increase.vy = -5\r\n    increase.lifespan = 2000\r\n# /bh3\r\n\r\n# bh5\r\ndef mouse_over_button():\r\n    temp_collider = sprites.create(image.create(1, 1))\r\n    temp_collider.image.fill(1)\r\n    temp_collider.set_position(mouse_x, mouse_y)\r\n    if temp_collider.overlaps_with(pizza_button):\r\n        pizza_button.scale = 1.1\r\n    else:\r\n        pizza_button.scale = 1\r\n    temp_collider.destroy()\r\n\r\ndef setup_mouse_over_loop():\r\n    game.on_update(mouse_over_button)\r\ntimer.background(setup_mouse_over_loop)\r\n# /bh5\r\n\r\ndef click_pizza(collider, pizza):\r\n# bh3\r\n    animate_click(collider)\r\n# /bh3\r\n    info.change_score_by(pizza_per_click)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.player, click_pizza)\r\n\r\ndef buy_more(collider, button):\r\n    global pizza_per_second\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        music.ba_ding.play()\r\n        info.change_score_by(-cost)\r\n        sprites.change_data_number_by(button, \"quantity\", 1)\r\n        sprites.read_data_sprite(button, \"quantity_text\").destroy()\r\n        sprites.set_data_sprite(button, \"quantity_text\", make_quantity_display(button))\r\n        sprites.change_data_number_by(button, \"cost\", (cost // 10) + 1)\r\n        sprites.read_data_sprite(button, \"cost_text\").destroy()\r\n        sprites.set_data_sprite(button, \"cost_text\", make_cost_display(button))\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.buy, buy_more)\r\n\r\n# bh2\r\ndef upgrade_click(collider, button):\r\n    global pizza_per_click\r\n    cost = sprites.read_data_number(button, \"cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        pizza_per_click *= 2\r\n        sprites.set_data_number(button, \"cost\", cost * 10)\r\n        make_click_upgrade_cost_display()\r\n        info.change_score_by(-cost)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade_click, upgrade_click)\r\n# /bh2\r\n\r\n# gh2\r\ndef buy_upgrade(collider, button):\r\n    cost = sprites.read_data_number(button, \"upgrade_cost\")\r\n    if cost > info.score():\r\n        music.buzzer.play()\r\n    else:\r\n        shop_item = sprites.read_data_sprite(button, \"shop_item\")\r\n        passive_value = sprites.read_data_number(shop_item, \"passive_increase_value\")\r\n        sprites.change_data_number_by(shop_item, \"passive_increase_value\", passive_value)\r\n        info.change_score_by(-cost)\r\n    collider.destroy()\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.upgrade, buy_upgrade)\r\n# /gh2\r\n\r\n# bh6\r\ndef collect_ice_cream(collider, ice_cream):\r\n    info.change_score_by((pizza_per_second + 1) * 120)\r\n    ice_cream.set_velocity(0, 0)\r\n    ice_cream.destroy(effects.hearts, 2000)\r\nsprites.on_overlap(SpriteKind.collider, SpriteKind.food, collect_ice_cream)\r\n# /bh6\r\n\r\ndef mouse_move(x, y):\r\n    global mouse_x, mouse_y\r\n    mouse_x = x\r\n    mouse_y = y\r\nbrowserEvents.on_mouse_move(mouse_move)\r\n\r\ndef passive_loop():\r\n    global pizza_per_second\r\n    pizza_per_second = 0\r\n    for button in sprites.all_of_kind(SpriteKind.buy):\r\n        quantity = sprites.read_data_number(button, \"quantity\")\r\n        value = sprites.read_data_number(button, \"passive_increase_value\")\r\n        pizza_per_second += quantity * value\r\n    pizza_per_second_sprite.set_text(str(pizza_per_second))\r\n    pizza_per_second_sprite.right = 162\r\n    info.change_score_by(pizza_per_second)\r\ngame.on_update_interval(1000, passive_loop)\r\n\r\n# bh1\r\ndef falling_pizza():\r\n    pizzas_to_spawn = Math.ceil(pizza_per_second / 1000)\r\n    pizzas_to_spawn = Math.constrain(pizzas_to_spawn, 0, 50)\r\n    for i in range(pizzas_to_spawn):\r\n        pizza = sprites.create(assets.image(\"pizza\"), SpriteKind.projectile)\r\n        pizza.scale = 0.25\r\n        pizza.bottom = 1\r\n        pizza.x = randint(6, 154)\r\n        pizza.z = -100\r\n        pizza.vy = 5\r\n        pizza.set_flag(SpriteFlag.AUTO_DESTROY, True)\r\ngame.on_update_interval(2000, falling_pizza)\r\n# /bh1\r\n\r\n#bh6\r\ndef spawn_ice_cream():\r\n    vx = (randint(0, 1) * 100) - 50\r\n    vy = (randint(0, 1) * 100) - 50\r\n    ice_cream = sprites.create_projectile_from_side(assets.image(\"ice cream\"), vx, vy)\r\n    ice_cream.set_kind(SpriteKind.food)\r\n    ice_cream.z = 100\r\n    timer.after(randint(45000, 75000), spawn_ice_cream)\r\ntimer.after(randint(45000, 75000), spawn_ice_cream)\r\n# /bh6\r\n\r\n# bh3 animate click w/ pizza\r\n# bh1 pizza falling\r\n# bh2 upgrade per click - could be the guided\r\n# db? if not show how much a click is worth\r\n\r\n# gh2 upgrade a type of thing you've bought - could this be the guided\r\n# bh4 more things you can buy\r\n# bh5 button affordance\r\n# bh6 random ice cream that flies in\r\n\r\n\r\n# achievements or database\r\n\r\n\r\n","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQgACAAAAAAAAAAAAAAAAAAAAAAu0REAAAAAAAAAAAAAAAAu10VQQAAAAAAAAAAAAAAS11V0eUAAAAAAAAAAAAARtRdXUHlAAAAAAAAAAAAa4dV1R1dBAAAAAAAAAAAu22HJS4dVA4AAAAAAAAAu11VViLiUlQOAAAAAAAAS+Qu1SUiIt7UTQAAAAAAuz0i4tIlIyLeTe4AAAAAQF0lIiJeJTMi3uUAAAAAsFRVJSMiXlUi4tPlAAAAAEtd1SUzIl5V5T5dBADg7k5dVdVVIuJTVVVVVAQA60vrVFXVVu0+VdVVFdQOAL5DtN5VbYfdVVXVXRVUDgC+NENLVWWHXVVV1V1BRQAAuzQzRN1VVlVVVdVWQUUAALtLM0PUVVVV7lJlh9XlAABLu0QzRF1VJSIuZYcR7QQAu7REM7RUVSIi4lUW0d1NALBLSzNDu1UyIuJV0VTkTgAAu0QzQ7vUMiPiVUFdDgAAALBLRENETi0iPlVN5QAAAAAAvkQ0tOvU7lMV1OQAAAAAAOBLRETrvt1VUdTtAAAAAAAAu0REtE7d1UXU5AAAAAAAALBLRETr1NVFTQ4AAAAAAAAAu0REu0tE1O0OAAAAAAAAAOBOtLvr1E3uAAAAAAAAAAAA7kS0u+7k7gAAAAAAAAAAAODuu+vu7g4AAAAAAAAAAAAA6+7u7u4AAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"pizza\"\n    },\n    \"image2\": {\n        \"data\": \"hwQLAAsAAABVVVVVVQUAAFVVVVVVBQAAVVVSVVUFAABVJVJVVQUAAFUiIiIiBQAAJSIiIiIFAABVIiIiIgUAAFUlUlVVBQAAVVVSVVUFAABVVVVVVQUAAFVVVVVVBQAA\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"upgrade\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAEREAAAAM0tEXVUEADARvdTdVUUA0xERvVVdRTDdHRHRW9VFExHRERG91QQTEREdEbHdBNsREdER0dsEM90R0RERSwDT0R0RERFLAB0RHREdEb0AHRHRER0RPQATHRERHdEDABMzG9E7MwAAMDEwMwsAAAAAMwAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"ice cream\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"with music\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"arcade-sprite-data\": \"github:microsoft/arcade-sprite-data#v0.2.1\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"2.0.1\",\n        \"pxt\": \"8.5.2\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}}],"shares":[]}